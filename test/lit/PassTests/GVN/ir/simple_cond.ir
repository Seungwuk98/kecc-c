// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s


fun i32 @f (i32) {
init:
  bid: b0
  allocations: 


block b0:
  %b0:p0:i32:x
  %b0:i0:i32 = add %b0:p0:i32 8:i32
  ret %b0:i0:i32
}
// CHECK: fun i32 @f (i32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:x
// CHECK-NEXT:   %b0:i0:i32 = add %b0:p0:i32 8:i32
// CHECK-NEXT:   ret %b0:i0:i32
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = add 0:i32 1:i32
  %b0:i1:u1 = cmp eq 0:i32 1:i32
  br %b0:i1:u1, b1(), b2()

block b1:
  j b3(1:i32)

block b2:
  j b3(2:i32)

block b3:
  %b3:p0:i32:t0
  %b3:i0:u1 = cmp lt %b0:i0:i32 %b3:p0:i32
  br %b3:i0:u1, b4(), b5()

block b4:
  j b6(%b0:i0:i32)

block b5:
  j b6(2:i32)

block b6:
  %b6:p0:i32:t1
  %b6:i0:i32 = call @f:[ret:i32 params:(i32)]*(%b6:p0:i32)
  %b6:i1:u1 = cmp eq %b6:i0:i32 9:i32
  %b6:i2:i32 = typecast %b6:i1:u1 to i32
  ret %b6:i2:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = add 0:i32 1:i32
// CHECK-NEXT:   %b0:i1:u1 = cmp eq 0:i32 1:i32
// CHECK-NEXT:   br %b0:i1:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   j b3(1:i32)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   j b3(2:i32)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:i32:t0
// CHECK-NEXT:   %b3:i0:u1 = cmp lt %b0:i0:i32 %b3:p0:i32
// CHECK-NEXT:   br %b3:i0:u1, b4(), b5()

// CHECK-LABEL: block b4:
// CHECK-NEXT:   j b6(%b0:i0:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   j b6(2:i32)

// CHECK-LABEL: block b6:
// CHECK-NEXT:   %b6:p0:i32:t1
// CHECK-NEXT:   %b6:i0:i32 = call @f:[ret:i32 params:(i32)]*(%b6:p0:i32)
// CHECK-NEXT:   %b6:i1:u1 = cmp eq %b6:i0:i32 9:i32
// CHECK-NEXT:   %b6:i2:i32 = typecast %b6:i1:u1 to i32
// CHECK-NEXT:   ret %b6:i2:i32
// CHECK-NEXT: }
