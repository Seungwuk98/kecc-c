// RUN: kecc-test-executor %s --test-return-value=1
// RUN: keci %s --test-return-value=1
// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s
// RUN: kecc-test-executor %s --translate-passes="--canonicalize-constant --gvn" --test-return-value=1
// RUN: kecc-opt %s --canonicalize-constant --gvn | keci --test-return-value=1


fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  j b2(0:i32, 0:i32)

block b2:
  %b2:p0:i32:i
  %b2:p1:i32:sum
  %b2:i0:u1 = cmp lt %b2:p0:i32 11:i32
  br %b2:i0:u1, b3(), b5()

block b3:
  %b3:i0:i32 = add %b2:p1:i32 %b2:p0:i32
  %b3:i1:i32 = add %b2:p0:i32 1:i32
  j b2(%b3:i1:i32, %b3:i0:i32)

block b5:
  %b5:i0:u1 = cmp eq %b2:p1:i32 55:i32
  %b5:i1:i32 = typecast %b5:i0:u1 to i32
  ret %b5:i1:i32
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   j b2(0:i32, 0:i32)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:p0:i32:i
// CHECK-NEXT:   %b2:p1:i32:sum
// CHECK-NEXT:   %b2:i0:u1 = cmp lt %b2:p0:i32 11:i32
// CHECK-NEXT:   br %b2:i0:u1, b3(), b5()

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:i0:i32 = add %b2:p1:i32 %b2:p0:i32
// CHECK-NEXT:   %b3:i1:i32 = add %b2:p0:i32 1:i32
// CHECK-NEXT:   j b2(%b3:i1:i32, %b3:i0:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:i0:u1 = cmp eq %b2:p1:i32 55:i32
// CHECK-NEXT:   %b5:i1:i32 = typecast %b5:i0:u1 to i32
// CHECK-NEXT:   ret %b5:i1:i32
// CHECK-NEXT: }
