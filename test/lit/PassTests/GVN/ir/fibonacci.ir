// RUN: kecc-test-executor %s --test-return-value=1
// RUN: keci %s --test-return-value=1
// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s
// RUN: kecc-test-executor %s --translate-passes="--canonicalize-constant --gvn" --test-return-value=1
// RUN: kecc-opt %s --canonicalize-constant --gvn | keci --test-return-value=1

var i32 @nonce = 1
// CHECK: var i32 @nonce = 1

fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 


block b0:
  %b0:p0:i32:n
  %b0:i0:u1 = cmp lt %b0:p0:i32 2:i32
  br %b0:i0:u1, b1(), b2()

block b1:
  ret %b0:p0:i32

block b2:
  %b2:i0:i32 = sub %b0:p0:i32 2:i32
  %b2:i1:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i0:i32)
  %b2:i2:i32 = sub %b0:p0:i32 1:i32
  %b2:i3:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i2:i32)
  %b2:i4:i32 = add %b2:i1:i32 %b2:i3:i32
  ret %b2:i4:i32
}
// CHECK-LABEL: fun i32 @fibonacci (i32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:n
// CHECK-NEXT:   %b0:i0:u1 = cmp lt %b0:p0:i32 2:i32
// CHECK-NEXT:   br %b0:i0:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   ret %b0:p0:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:i32 = sub %b0:p0:i32 2:i32
// CHECK-NEXT:   %b2:i1:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i0:i32)
// CHECK-NEXT:   %b2:i2:i32 = sub %b0:p0:i32 1:i32
// CHECK-NEXT:   %b2:i3:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b2:i2:i32)
// CHECK-NEXT:   %b2:i4:i32 = add %b2:i1:i32 %b2:i3:i32
// CHECK-NEXT:   ret %b2:i4:i32
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = load @nonce:i32*
  %b0:i1:i32 = mod %b0:i0:i32 20:i32
  %b0:i2:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b0:i1:i32)
  ret %b0:i2:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = load @nonce:i32*
// CHECK-NEXT:   %b0:i1:i32 = mod %b0:i0:i32 20:i32
// CHECK-NEXT:   %b0:i2:i32 = call @fibonacci:[ret:i32 params:(i32)]*(%b0:i1:i32)
// CHECK-NEXT:   ret %b0:i2:i32
// CHECK-NEXT: }
