// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s


fun i32 @foo (i32, i32, i32) {
init:
  bid: b0
  allocations: 


block b0:
  %b0:p0:i32:i
  %b0:p1:i32:j
  %b0:p2:i32:k
  %b0:i0:i32 = add %b0:p0:i32 %b0:p1:i32
  %b0:i1:i32 = add %b0:i0:i32 %b0:p2:i32
  ret %b0:i1:i32
}
// CHECK: fun i32 @foo (i32, i32, i32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:i
// CHECK-NEXT:   %b0:p1:i32:j
// CHECK-NEXT:   %b0:p2:i32:k
// CHECK-NEXT:   %b0:i0:i32 = add %b0:p0:i32 %b0:p1:i32
// CHECK-NEXT:   %b0:i1:i32 = add %b0:i0:i32 %b0:p2:i32
// CHECK-NEXT:   ret %b0:i1:i32
// CHECK-NEXT: }

fun [ret:i32 params:(i32, i32, i32)]* @foo2 () {
init:
  bid: b0
  allocations: 


block b0:
  ret @foo:[ret:i32 params:(i32, i32, i32)]*
}
// CHECK-LABEL: fun [ret:i32 params:(i32, i32, i32)]* @foo2 () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   ret @foo:[ret:i32 params:(i32, i32, i32)]*
// CHECK-NEXT: }

fun [ret:[ret:i32 params:(i32, i32, i32)]* params:()]* @foo3 () {
init:
  bid: b0
  allocations: 


block b0:
  ret @foo2:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]*
}
// CHECK-LABEL: fun [ret:[ret:i32 params:(i32, i32, i32)]* params:()]* @foo3 () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   ret @foo2:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]*
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]* = call @foo3:[ret:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]* params:()]*()
  %b0:i1:[ret:i32 params:(i32, i32, i32)]* = call %b0:i0:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]*()
  %b0:i2:i32 = call %b0:i1:[ret:i32 params:(i32, i32, i32)]*(2:i32, 2:i32, 2:i32)
  %b0:i3:u1 = cmp eq %b0:i2:i32 6:i32
  %b0:i4:i32 = typecast %b0:i3:u1 to i32
  ret %b0:i4:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]* = call @foo3:[ret:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]* params:()]*()
// CHECK-NEXT:   %b0:i1:[ret:i32 params:(i32, i32, i32)]* = call %b0:i0:[ret:[ret:i32 params:(i32, i32, i32)]* params:()]*()
// CHECK-NEXT:   %b0:i2:i32 = call %b0:i1:[ret:i32 params:(i32, i32, i32)]*(2:i32, 2:i32, 2:i32)
// CHECK-NEXT:   %b0:i3:u1 = cmp eq %b0:i2:i32 6:i32
// CHECK-NEXT:   %b0:i4:i32 = typecast %b0:i3:u1 to i32
// CHECK-NEXT:   ret %b0:i4:i32
// CHECK-NEXT: }
