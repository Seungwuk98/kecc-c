// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s


fun i32* @foo (i32*) {
init:
  bid: b0
  allocations: 


block b0:
  %b0:p0:i32*:a
  ret %b0:p0:i32*
}
// CHECK: fun i32* @foo (i32*) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32*:a
// CHECK-NEXT:   ret %b0:p0:i32*
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:a
    %l1:i32*:p

block b0:
  %b0:i0:unit = store 1:i32 %l0:i32*
  %b0:i1:unit = store %l0:i32* %l1:i32**
  %b0:i2:i32* = load %l1:i32**
  %b0:i3:i32* = load %l1:i32**
  %b0:i4:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i3:i32*)
  %b0:i5:i32* = load %l1:i32**
  %b0:i6:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i5:i32*)
  %b0:i7:i32* = load %l1:i32**
  %b0:i8:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i7:i32*)
  %b0:i9:i32* = load %l1:i32**
  %b0:i10:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i9:i32*)
  %b0:i11:i32 = load %b0:i10:i32*
  %b0:i12:i32 = add %b0:i11:i32 1:i32
  %b0:i13:unit = store %b0:i12:i32 %b0:i6:i32*
  %b0:i14:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i2:i32*)
  %b0:i15:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i2:i32*)
  %b0:i16:i32 = load %b0:i15:i32*
  %b0:i17:i32 = add %b0:i16:i32 1:i32
  %b0:i18:unit = store %b0:i17:i32 %b0:i14:i32*
  %b0:i19:i32 = load %l0:i32*
  %b0:i20:u1 = cmp eq %b0:i19:i32 3:i32
  %b0:i21:i32 = typecast %b0:i20:u1 to i32
  ret %b0:i21:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:a
// CHECK-NEXT:     %l1:i32*:p

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:unit = store 1:i32 %l0:i32*
// CHECK-NEXT:   %b0:i1:unit = store %l0:i32* %l1:i32**
// CHECK-NEXT:   %b0:i2:i32* = load %l1:i32**
// CHECK-NEXT:   %b0:i3:i32* = load %l1:i32**
// CHECK-NEXT:   %b0:i4:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i3:i32*)
// CHECK-NEXT:   %b0:i5:i32* = load %l1:i32**
// CHECK-NEXT:   %b0:i6:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i5:i32*)
// CHECK-NEXT:   %b0:i7:i32* = load %l1:i32**
// CHECK-NEXT:   %b0:i8:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i7:i32*)
// CHECK-NEXT:   %b0:i9:i32* = load %l1:i32**
// CHECK-NEXT:   %b0:i10:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i9:i32*)
// CHECK-NEXT:   %b0:i11:i32 = load %b0:i10:i32*
// CHECK-NEXT:   %b0:i12:i32 = add %b0:i11:i32 1:i32
// CHECK-NEXT:   %b0:i13:unit = store %b0:i12:i32 %b0:i6:i32*
// CHECK-NEXT:   %b0:i14:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i2:i32*)
// CHECK-NEXT:   %b0:i15:i32* = call @foo:[ret:i32* params:(i32*)]*(%b0:i2:i32*)
// CHECK-NEXT:   %b0:i16:i32 = load %b0:i15:i32*
// CHECK-NEXT:   %b0:i17:i32 = add %b0:i16:i32 1:i32
// CHECK-NEXT:   %b0:i18:unit = store %b0:i17:i32 %b0:i14:i32*
// CHECK-NEXT:   %b0:i19:i32 = load %l0:i32*
// CHECK-NEXT:   %b0:i20:u1 = cmp eq %b0:i19:i32 3:i32
// CHECK-NEXT:   %b0:i21:i32 = typecast %b0:i20:u1 to i32
// CHECK-NEXT:   ret %b0:i21:i32
// CHECK-NEXT: }
