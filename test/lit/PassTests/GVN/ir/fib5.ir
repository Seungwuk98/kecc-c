// RUN: kecc-test-executor %s --test-return-value=1
// RUN: kecc-opt %s --canonicalize-constant --gvn | FileCheck %s


fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 


block b0:
  %b0:p0:i32:n
  %b0:i0:u1 = cmp lt %b0:p0:i32 2:i32
  br %b0:i0:u1, b1(), b2()

block b1:
  ret %b0:p0:i32

block b2:
  j b5(1:i32, 0:i32, 1:i32)

block b5:
  %b5:p0:i32:i
  %b5:p1:i32:t1
  %b5:p2:i32:t2
  %b5:i0:i32 = add %b5:p1:i32 %b5:p2:i32
  %b5:i1:i32 = add %b5:p0:i32 1:i32
  %b5:i2:u1 = cmp lt %b5:i1:i32 %b0:p0:i32
  br %b5:i2:u1, b5(%b5:i1:i32, %b5:p2:i32, %b5:i0:i32), b7()

block b7:
  ret %b5:i0:i32
}
// CHECK: fun i32 @fibonacci (i32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:n
// CHECK-NEXT:   %b0:i0:u1 = cmp lt %b0:p0:i32 2:i32
// CHECK-NEXT:   br %b0:i0:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   ret %b0:p0:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   j b5(1:i32, 0:i32, 1:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:p0:i32:i
// CHECK-NEXT:   %b5:p1:i32:t1
// CHECK-NEXT:   %b5:p2:i32:t2
// CHECK-NEXT:   %b5:i0:i32 = add %b5:p1:i32 %b5:p2:i32
// CHECK-NEXT:   %b5:i1:i32 = add %b5:p0:i32 1:i32
// CHECK-NEXT:   %b5:i2:u1 = cmp lt %b5:i1:i32 %b0:p0:i32
// CHECK-NEXT:   br %b5:i2:u1, b5(%b5:i1:i32, %b5:p2:i32, %b5:i0:i32), b7()

// CHECK-LABEL: block b7:
// CHECK-NEXT:   ret %b5:i0:i32
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
  %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
  %b0:i2:i32 = typecast %b0:i1:u1 to i32
  ret %b0:i2:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
// CHECK-NEXT:   %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
// CHECK-NEXT:   %b0:i2:i32 = typecast %b0:i1:u1 to i32
// CHECK-NEXT:   ret %b0:i2:i32
// CHECK-NEXT: }
