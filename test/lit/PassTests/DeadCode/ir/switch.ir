// RUN: kecc-test-executor %s --test-return-value=1
// RUN: kecc-opt %s --dead-code-elimination | FileCheck %s


fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:a
    %l1:i32:b

block b0:
  %b0:i0:unit = nop
  %b0:i1:unit = nop
  %b0:i2:unit = nop
  switch 1:i32 default b4() [
    0:i32 b2()
    1:i32 b3()
  ]

block b1:
  %b1:p0:i32:b
  %b1:i0:unit = nop
  %b1:i1:u1 = cmp eq %b1:p0:i32 2:i32
  %b1:i2:i32 = typecast %b1:i1:u1 to i32
  ret %b1:i2:i32

block b2:
  %b2:i0:unit = nop
  %b2:i1:i32 = add 0:i32 1:i32
  %b2:i2:unit = nop
  j b1(%b2:i1:i32)

block b3:
  %b3:i0:unit = nop
  %b3:i1:i32 = add 0:i32 2:i32
  %b3:i2:unit = nop
  j b1(%b3:i1:i32)

block b4:
  %b4:i0:unit = nop
  %b4:i1:i32 = add 0:i32 3:i32
  %b4:i2:unit = nop
  j b1(%b4:i1:i32)
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   switch 1:i32 default b4() [
// CHECK-NEXT:     0:i32 b2()
// CHECK-NEXT:     1:i32 b3()
// CHECK-NEXT:   ]

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:p0:i32:b
// CHECK-NEXT:   %b1:i0:u1 = cmp eq %b1:p0:i32 2:i32
// CHECK-NEXT:   %b1:i1:i32 = typecast %b1:i0:u1 to i32
// CHECK-NEXT:   ret %b1:i1:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:i32 = add 0:i32 1:i32
// CHECK-NEXT:   j b1(%b2:i0:i32)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:i0:i32 = add 0:i32 2:i32
// CHECK-NEXT:   j b1(%b3:i0:i32)

// CHECK-LABEL: block b4:
// CHECK-NEXT:   %b4:i0:i32 = add 0:i32 3:i32
// CHECK-NEXT:   j b1(%b4:i0:i32)
// CHECK-NEXT: }
