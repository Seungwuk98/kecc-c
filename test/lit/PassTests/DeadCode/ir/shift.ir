// RUN: kecc-test-executor %s --test-return-value=1 
// RUN: keci %s --test-return-value=1
// RUN: kecc-opt %s --dead-code-elimination | FileCheck %s


fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i8:a
    %l1:i8:b
    %l2:u8:c
    %l3:u1:t0

block b0:
  %b0:i0:i8 = typecast 127:i32 to i8
  %b0:i1:unit = nop
  %b0:i2:unit = nop
  %b0:i3:i32 = typecast %b0:i0:i8 to i32
  %b0:i4:i32 = shl %b0:i3:i32 1:i32
  %b0:i5:i8 = typecast %b0:i4:i32 to i8
  %b0:i6:unit = nop
  %b0:i7:unit = nop
  %b0:i8:u8 = typecast %b0:i5:i8 to u8
  %b0:i9:i32 = typecast %b0:i8:u8 to i32
  %b0:i10:i32 = shr %b0:i9:i32 1:i32
  %b0:i11:u8 = typecast %b0:i10:i32 to u8
  %b0:i12:unit = nop
  %b0:i13:unit = nop
  %b0:i14:i32 = minus 2:i32
  %b0:i15:i32 = typecast %b0:i5:i8 to i32
  %b0:i16:u1 = cmp eq %b0:i15:i32 %b0:i14:i32
  br %b0:i16:u1, b1(), b2()

block b1:
  %b1:i0:unit = nop
  %b1:i1:i32 = typecast %b0:i11:u8 to i32
  %b1:i2:u1 = cmp eq %b1:i1:i32 127:i32
  %b1:i3:unit = nop
  j b3(%b1:i2:u1)

block b2:
  %b2:i0:unit = nop
  j b3(0:u1)

block b3:
  %b3:p0:u1:t0
  %b3:i0:unit = nop
  %b3:i1:i32 = typecast %b3:p0:u1 to i32
  ret %b3:i1:i32
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i8 = typecast 127:i32 to i8
// CHECK-NEXT:   %b0:i1:i32 = typecast %b0:i0:i8 to i32
// CHECK-NEXT:   %b0:i2:i32 = shl %b0:i1:i32 1:i32
// CHECK-NEXT:   %b0:i3:i8 = typecast %b0:i2:i32 to i8
// CHECK-NEXT:   %b0:i4:u8 = typecast %b0:i3:i8 to u8
// CHECK-NEXT:   %b0:i5:i32 = typecast %b0:i4:u8 to i32
// CHECK-NEXT:   %b0:i6:i32 = shr %b0:i5:i32 1:i32
// CHECK-NEXT:   %b0:i7:u8 = typecast %b0:i6:i32 to u8
// CHECK-NEXT:   %b0:i8:i32 = minus 2:i32
// CHECK-NEXT:   %b0:i9:i32 = typecast %b0:i3:i8 to i32
// CHECK-NEXT:   %b0:i10:u1 = cmp eq %b0:i9:i32 %b0:i8:i32
// CHECK-NEXT:   br %b0:i10:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:i0:i32 = typecast %b0:i7:u8 to i32
// CHECK-NEXT:   %b1:i1:u1 = cmp eq %b1:i0:i32 127:i32
// CHECK-NEXT:   j b3(%b1:i1:u1)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   j b3(0:u1)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:u1:t0
// CHECK-NEXT:   %b3:i0:i32 = typecast %b3:p0:u1 to i32
// CHECK-NEXT:   ret %b3:i0:i32
// CHECK-NEXT: }
