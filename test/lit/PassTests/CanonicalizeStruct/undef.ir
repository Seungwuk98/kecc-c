// RUN: kecc-opt %s --outline-constant --canonicalize-struct --fold-type-cast | FileCheck %s

struct S : { x: i32, y: f32, z: i32 }
struct B : { x: i64, y: i64, z: i64 }

fun struct S @callee_func0 () {
// CHECK-LABEL: fun i64, i64 @callee_func0 () {
init:
  bid: b0
  allocations:
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:

block b0:
// CHECK-LABEL: block b0:
  ret undef:struct S
  // CHECK-NEXT: ret undef:i64, undef:i64
}

fun unit @caller_func0 () {
// CHECK-LABEL: fun unit @caller_func0 () {
init:
  bid: b0
  allocations:
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:

block b0:
// CHECK-LABEL: block b0:
  %b0:i0:struct S = call @callee_func0:[ret:struct S params:()]*() 
  // CHECK-NEXT: %b0:i0:[ret:i64, i64 params:()]* = outline @callee_func0:[ret:i64, i64 params:()]*
  // CHECK-NEXT: %b0:i1:i64, %b0:i2:i64 = call %b0:i0:[ret:i64, i64 params:()]*()
  ret
  // CHECK-NEXT: ret
}

