// RUN: kecc-opt %s --canonicalize-constant --conversion-to-copy | FileCheck %s

fun unit @callee (i32)
// CHECK: fun unit @callee (i32)

fun unit @test (){
// CHECK: fun unit @test ()
init:
  bid: b0
  allocations:
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


block b0:
// CHECK-LABEL: block b0:
  %b0:i0:i32 = add 0:i32 10:i32
  %b0:i1:i32 = sub %b0:i0:i32 0:i32
  %b0:i2:i32 = mul %b0:i1:i32 1:i32
  %b0:i3:i32 = div %b0:i2:i32 1:i32
  %b0:i4:i32 = and %b0:i3:i32 4294967295:i32 
  %b0:i5:i32 = or %b0:i4:i32 0:i32
  %b0:i6:i32 = xor %b0:i5:i32 0:i32
  %b0:i7:unit = call @callee:[ret:unit params:(i32)]*(%b0:i6:i32)
  // CHECK-NEXT: %b0:i0:unit = call @callee:[ret:unit params:(i32)]*(10:i32)
  ret
  // CHECK-NEXT: ret
}

fun unit @callee2 (f32)
// CHECK: fun unit @callee2 (f32)

fun unit @test2 () {
// CHECK: fun unit @test2 ()
init:
  bid: b0
  allocations:
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


block b0:
// CHECK-LABEL: block b0:
  %b0:i0:f32 = add 10.0:f32 0.0:f32
  %b0:i1:f32 = mul %b0:i0:f32 1.0:f32
  %b0:i2:f32 = div %b0:i1:f32 1.0:f32
  %b0:i3:unit = call @callee2:[ret:unit params:(f32)]*(%b0:i2:f32)
  // CHECK-NEXT: %b0:i0:unit = call @callee2:[ret:unit params:(f32)]*(10:f32)
  ret
  // CHECK-NEXT: ret
}
