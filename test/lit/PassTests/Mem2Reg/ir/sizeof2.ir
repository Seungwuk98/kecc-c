// RUN: kecc-opt %s --mem2reg | FileCheck %s


fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i8:a
    %l1:i8:b
    %l2:[10 x i64]:c
    %l3:u1:t0
    %l4:u1:t1

block b0:
  %b0:i0:i8 = typecast 42:i32 to i8
  %b0:i1:unit = store %b0:i0:i8 %l0:i8*
  %b0:i2:i8 = typecast 5:i32 to i8
  %b0:i3:unit = store %b0:i2:i8 %l1:i8*
  %b0:i4:u64 = typecast 1:i32 to u64
  %b0:i5:u1 = cmp eq 1:u64 %b0:i4:u64
  br %b0:i5:u1, b4(), b5()

block b1:
  %b1:i0:u64 = typecast 80:i32 to u64
  %b1:i1:u1 = cmp eq 80:u64 %b1:i0:u64
  %b1:i2:unit = store %b1:i1:u1 %l4:u1*
  j b3()

block b2:
  %b2:i0:unit = store 0:u1 %l4:u1*
  j b3()

block b3:
  %b3:i0:u1 = load %l4:u1*
  %b3:i1:i32 = typecast %b3:i0:u1 to i32
  ret %b3:i1:i32

block b4:
  %b4:i0:u64 = typecast 4:i32 to u64
  %b4:i1:u1 = cmp eq 4:u64 %b4:i0:u64
  %b4:i2:unit = store %b4:i1:u1 %l3:u1*
  j b6()

block b5:
  %b5:i0:unit = store 0:u1 %l3:u1*
  j b6()

block b6:
  %b6:i0:u1 = load %l3:u1*
  br %b6:i0:u1, b1(), b2()
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i8:a
// CHECK-NEXT:     %l1:i8:b
// CHECK-NEXT:     %l2:[10 x i64]:c
// CHECK-NEXT:     %l3:u1:t0
// CHECK-NEXT:     %l4:u1:t1

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i8 = typecast 42:i32 to i8
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   %b0:i2:i8 = typecast 5:i32 to i8
// CHECK-NEXT:   %b0:i3:unit = nop
// CHECK-NEXT:   %b0:i4:u64 = typecast 1:i32 to u64
// CHECK-NEXT:   %b0:i5:u1 = cmp eq 1:u64 %b0:i4:u64
// CHECK-NEXT:   br %b0:i5:u1, b4(), b5()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:i0:u64 = typecast 80:i32 to u64
// CHECK-NEXT:   %b1:i1:u1 = cmp eq 80:u64 %b1:i0:u64
// CHECK-NEXT:   %b1:i2:unit = nop
// CHECK-NEXT:   j b3(%b1:i1:u1)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   j b3(0:u1)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:u1:t1
// CHECK-NEXT:   %b3:i0:unit = nop
// CHECK-NEXT:   %b3:i1:i32 = typecast %b3:p0:u1 to i32
// CHECK-NEXT:   ret %b3:i1:i32

// CHECK-LABEL: block b4:
// CHECK-NEXT:   %b4:i0:u64 = typecast 4:i32 to u64
// CHECK-NEXT:   %b4:i1:u1 = cmp eq 4:u64 %b4:i0:u64
// CHECK-NEXT:   %b4:i2:unit = nop
// CHECK-NEXT:   j b6(%b4:i1:u1)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:i0:unit = nop
// CHECK-NEXT:   j b6(0:u1)

// CHECK-LABEL: block b6:
// CHECK-NEXT:   %b6:p0:u1:t0
// CHECK-NEXT:   %b6:i0:unit = nop
// CHECK-NEXT:   br %b6:p0:u1, b1(), b2()
// CHECK-NEXT: }
