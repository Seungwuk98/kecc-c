// RUN: kecc-opt %s --mem2reg | FileCheck %s

var i32 @nonce = 1
// CHECK: var i32 @nonce = 1

fun i32 @foo () {
init:
  bid: b0
  allocations: 
    %l0:i32:sum
    %l1:i32:i
    %l2:i32:continue_num

block b0:
  %b0:i0:unit = store 0:i32 %l0:i32*
  %b0:i1:unit = store 0:i32 %l1:i32*
  %b0:i2:i32 = load @nonce:i32*
  %b0:i3:i32 = mod %b0:i2:i32 98:i32
  %b0:i4:unit = store %b0:i3:i32 %l2:i32*
  j b1()

block b1:
  %b1:i0:i32 = load %l1:i32*
  %b1:i1:u1 = cmp lt %b1:i0:i32 100:i32
  br %b1:i1:u1, b2(), b3()

block b2:
  %b2:i0:i32 = load %l1:i32*
  %b2:i1:i32 = load %l2:i32*
  %b2:i2:u1 = cmp eq %b2:i0:i32 %b2:i1:i32
  br %b2:i2:u1, b4(), b5()

block b3:
  %b3:i0:i32 = load %l0:i32*
  ret %b3:i0:i32

block b4:
  %b4:i0:i32 = load %l1:i32*
  %b4:i1:i32 = add %b4:i0:i32 1:i32
  %b4:i2:unit = store %b4:i1:i32 %l1:i32*
  j b1()

block b5:
  %b5:i0:i32 = load %l0:i32*
  %b5:i1:i32 = load %l1:i32*
  %b5:i2:i32 = add %b5:i0:i32 %b5:i1:i32
  %b5:i3:unit = store %b5:i2:i32 %l0:i32*
  %b5:i4:i32 = load %l1:i32*
  %b5:i5:i32 = add %b5:i4:i32 1:i32
  %b5:i6:unit = store %b5:i5:i32 %l1:i32*
  %b5:i7:i32 = load %l1:i32*
  %b5:i8:i32 = load %l2:i32*
  %b5:i9:i32 = add %b5:i8:i32 2:i32
  %b5:i10:u1 = cmp eq %b5:i7:i32 %b5:i9:i32
  br %b5:i10:u1, b3(), b1()
}
// CHECK-LABEL: fun i32 @foo () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:sum
// CHECK-NEXT:     %l1:i32:i
// CHECK-NEXT:     %l2:i32:continue_num

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:unit = nop
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   %b0:i2:i32 = load @nonce:i32*
// CHECK-NEXT:   %b0:i3:i32 = mod %b0:i2:i32 98:i32
// CHECK-NEXT:   %b0:i4:unit = nop
// CHECK-NEXT:   j b1(0:i32, 0:i32)

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:p0:i32:sum
// CHECK-NEXT:   %b1:p1:i32:i
// CHECK-NEXT:   %b1:i0:unit = nop
// CHECK-NEXT:   %b1:i1:u1 = cmp lt %b1:p1:i32 100:i32
// CHECK-NEXT:   br %b1:i1:u1, b2(), b3(%b1:p0:i32)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   %b2:i1:unit = nop
// CHECK-NEXT:   %b2:i2:u1 = cmp eq %b1:p1:i32 %b0:i3:i32
// CHECK-NEXT:   br %b2:i2:u1, b4(), b5()

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:i32:sum
// CHECK-NEXT:   %b3:i0:unit = nop
// CHECK-NEXT:   ret %b3:p0:i32

// CHECK-LABEL: block b4:
// CHECK-NEXT:   %b4:i0:unit = nop
// CHECK-NEXT:   %b4:i1:i32 = add %b1:p1:i32 1:i32
// CHECK-NEXT:   %b4:i2:unit = nop
// CHECK-NEXT:   j b1(%b1:p0:i32, %b4:i1:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:i0:unit = nop
// CHECK-NEXT:   %b5:i1:unit = nop
// CHECK-NEXT:   %b5:i2:i32 = add %b1:p0:i32 %b1:p1:i32
// CHECK-NEXT:   %b5:i3:unit = nop
// CHECK-NEXT:   %b5:i4:unit = nop
// CHECK-NEXT:   %b5:i5:i32 = add %b1:p1:i32 1:i32
// CHECK-NEXT:   %b5:i6:unit = nop
// CHECK-NEXT:   %b5:i7:unit = nop
// CHECK-NEXT:   %b5:i8:unit = nop
// CHECK-NEXT:   %b5:i9:i32 = add %b0:i3:i32 2:i32
// CHECK-NEXT:   %b5:i10:u1 = cmp eq %b5:i5:i32 %b5:i9:i32
// CHECK-NEXT:   br %b5:i10:u1, b3(%b5:i2:i32), b1(%b5:i2:i32, %b5:i5:i32)
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @foo:[ret:i32 params:()]*()
  ret %b0:i0:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = call @foo:[ret:i32 params:()]*()
// CHECK-NEXT:   ret %b0:i0:i32
// CHECK-NEXT: }
