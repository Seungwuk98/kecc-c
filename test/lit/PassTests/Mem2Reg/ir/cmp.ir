// RUN: kecc-test-executor %s --test-return-value=1
// RUN: kecc-opt %s --mem2reg | FileCheck %s


fun i32 @char_greater_than (i8, u8) {
init:
  bid: b0
  allocations: 
    %l0:i8:i
    %l1:u8:j

block b0:
  %b0:p0:i8:i
  %b0:p1:u8:j
  %b0:i0:unit = store %b0:p0:i8 %l0:i8*
  %b0:i1:unit = store %b0:p1:u8 %l1:u8*
  %b0:i2:i8 = load %l0:i8*
  %b0:i3:u8 = load %l1:u8*
  %b0:i4:i32 = typecast %b0:i2:i8 to i32
  %b0:i5:i32 = typecast %b0:i3:u8 to i32
  %b0:i6:u1 = cmp gt %b0:i4:i32 %b0:i5:i32
  br %b0:i6:u1, b1(), b2()

block b1:
  ret 1:i32

block b2:
  ret 0:i32
}
// CHECK: fun i32 @char_greater_than (i8, u8) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i8:i
// CHECK-NEXT:     %l1:u8:j

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i8:i
// CHECK-NEXT:   %b0:p1:u8:j
// CHECK-NEXT:   %b0:i0:unit = nop
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   %b0:i2:unit = nop
// CHECK-NEXT:   %b0:i3:unit = nop
// CHECK-NEXT:   %b0:i4:i32 = typecast %b0:p0:i8 to i32
// CHECK-NEXT:   %b0:i5:i32 = typecast %b0:p1:u8 to i32
// CHECK-NEXT:   %b0:i6:u1 = cmp gt %b0:i4:i32 %b0:i5:i32
// CHECK-NEXT:   br %b0:i6:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   ret 1:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   ret 0:i32
// CHECK-NEXT: }

fun i32 @int_greater_than (i32, u32) {
init:
  bid: b0
  allocations: 
    %l0:i32:i
    %l1:u32:j

block b0:
  %b0:p0:i32:i
  %b0:p1:u32:j
  %b0:i0:unit = store %b0:p0:i32 %l0:i32*
  %b0:i1:unit = store %b0:p1:u32 %l1:u32*
  %b0:i2:i32 = load %l0:i32*
  %b0:i3:u32 = load %l1:u32*
  %b0:i4:u32 = typecast %b0:i2:i32 to u32
  %b0:i5:u1 = cmp gt %b0:i4:u32 %b0:i3:u32
  br %b0:i5:u1, b1(), b2()

block b1:
  ret 1:i32

block b2:
  ret 0:i32
}
// CHECK-LABEL: fun i32 @int_greater_than (i32, u32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:i
// CHECK-NEXT:     %l1:u32:j

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:i
// CHECK-NEXT:   %b0:p1:u32:j
// CHECK-NEXT:   %b0:i0:unit = nop
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   %b0:i2:unit = nop
// CHECK-NEXT:   %b0:i3:unit = nop
// CHECK-NEXT:   %b0:i4:u32 = typecast %b0:p0:i32 to u32
// CHECK-NEXT:   %b0:i5:u1 = cmp gt %b0:i4:u32 %b0:p1:u32
// CHECK-NEXT:   br %b0:i5:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   ret 1:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   ret 0:i32
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:r1
    %l1:i32:r2
    %l2:u1:t0

block b0:
  %b0:i0:i32 = minus 1:i32
  %b0:i1:u32 = typecast 1:i32 to u32
  %b0:i2:i32 = call @int_greater_than:[ret:i32 params:(i32, u32)]*(%b0:i0:i32, %b0:i1:u32)
  %b0:i3:unit = store %b0:i2:i32 %l0:i32*
  %b0:i4:i32 = minus 1:i32
  %b0:i5:i8 = typecast %b0:i4:i32 to i8
  %b0:i6:u8 = typecast 1:i32 to u8
  %b0:i7:i32 = call @char_greater_than:[ret:i32 params:(i8, u8)]*(%b0:i5:i8, %b0:i6:u8)
  %b0:i8:unit = store %b0:i7:i32 %l1:i32*
  %b0:i9:i32 = load %l0:i32*
  %b0:i10:u1 = cmp eq %b0:i9:i32 1:i32
  br %b0:i10:u1, b1(), b2()

block b1:
  %b1:i0:i32 = load %l1:i32*
  %b1:i1:u1 = cmp eq %b1:i0:i32 0:i32
  %b1:i2:unit = store %b1:i1:u1 %l2:u1*
  j b3()

block b2:
  %b2:i0:unit = store 0:u1 %l2:u1*
  j b3()

block b3:
  %b3:i0:u1 = load %l2:u1*
  %b3:i1:i32 = typecast %b3:i0:u1 to i32
  ret %b3:i1:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:r1
// CHECK-NEXT:     %l1:i32:r2
// CHECK-NEXT:     %l2:u1:t0

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i1:u32 = typecast 1:i32 to u32
// CHECK-NEXT:   %b0:i2:i32 = call @int_greater_than:[ret:i32 params:(i32, u32)]*(%b0:i0:i32, %b0:i1:u32)
// CHECK-NEXT:   %b0:i3:unit = nop
// CHECK-NEXT:   %b0:i4:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i5:i8 = typecast %b0:i4:i32 to i8
// CHECK-NEXT:   %b0:i6:u8 = typecast 1:i32 to u8
// CHECK-NEXT:   %b0:i7:i32 = call @char_greater_than:[ret:i32 params:(i8, u8)]*(%b0:i5:i8, %b0:i6:u8)
// CHECK-NEXT:   %b0:i8:unit = nop
// CHECK-NEXT:   %b0:i9:unit = nop
// CHECK-NEXT:   %b0:i10:u1 = cmp eq %b0:i2:i32 1:i32
// CHECK-NEXT:   br %b0:i10:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:i0:unit = nop
// CHECK-NEXT:   %b1:i1:u1 = cmp eq %b0:i7:i32 0:i32
// CHECK-NEXT:   %b1:i2:unit = nop
// CHECK-NEXT:   j b3(%b1:i1:u1)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   j b3(0:u1)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:u1:t0
// CHECK-NEXT:   %b3:i0:unit = nop
// CHECK-NEXT:   %b3:i1:i32 = typecast %b3:p0:u1 to i32
// CHECK-NEXT:   ret %b3:i1:i32
// CHECK-NEXT: }
