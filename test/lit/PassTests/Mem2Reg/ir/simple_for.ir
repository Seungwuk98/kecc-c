// RUN: kecc-test-executor %s --test-return-value=1
// RUN: kecc-opt %s --mem2reg | FileCheck %s


fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:i
    %l1:i32:sum

block b0:
  %b0:i0:unit = store 0:i32 %l1:i32*
  %b0:i1:unit = store 0:i32 %l0:i32*
  j b2()

block b2:
  %b2:i0:i32 = load %l0:i32*
  %b2:i1:u1 = cmp lt %b2:i0:i32 11:i32
  br %b2:i1:u1, b3(), b5()

block b3:
  %b3:i0:i32 = load %l1:i32*
  %b3:i1:i32 = load %l0:i32*
  %b3:i2:i32 = add %b3:i0:i32 %b3:i1:i32
  %b3:i3:unit = store %b3:i2:i32 %l1:i32*
  %b3:i4:i32 = load %l0:i32*
  %b3:i5:i32 = add %b3:i4:i32 1:i32
  %b3:i6:unit = store %b3:i5:i32 %l0:i32*
  j b2()

block b5:
  %b5:i0:i32 = load %l1:i32*
  %b5:i1:u1 = cmp eq %b5:i0:i32 55:i32
  %b5:i2:i32 = typecast %b5:i1:u1 to i32
  ret %b5:i2:i32
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:i
// CHECK-NEXT:     %l1:i32:sum

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:unit = nop
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   j b2(0:i32, 0:i32)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:p0:i32:i
// CHECK-NEXT:   %b2:p1:i32:sum
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   %b2:i1:u1 = cmp lt %b2:p0:i32 11:i32
// CHECK-NEXT:   br %b2:i1:u1, b3(), b5()

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:i0:unit = nop
// CHECK-NEXT:   %b3:i1:unit = nop
// CHECK-NEXT:   %b3:i2:i32 = add %b2:p1:i32 %b2:p0:i32
// CHECK-NEXT:   %b3:i3:unit = nop
// CHECK-NEXT:   %b3:i4:unit = nop
// CHECK-NEXT:   %b3:i5:i32 = add %b2:p0:i32 1:i32
// CHECK-NEXT:   %b3:i6:unit = nop
// CHECK-NEXT:   j b2(%b3:i5:i32, %b3:i2:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:i0:unit = nop
// CHECK-NEXT:   %b5:i1:u1 = cmp eq %b2:p1:i32 55:i32
// CHECK-NEXT:   %b5:i2:i32 = typecast %b5:i1:u1 to i32
// CHECK-NEXT:   ret %b5:i2:i32
// CHECK-NEXT: }
