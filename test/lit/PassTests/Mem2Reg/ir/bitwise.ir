// RUN: kecc-test-executor %s --test-return-value=1
// RUN: keci %s --test-return-value=1
// RUN: kecc-opt %s --mem2reg | FileCheck %s


fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:u8:a
    %l1:u8:b
    %l2:u8:c
    %l3:u8:d
    %l4:u8:e
    %l5:u8:f
    %l6:u8:g
    %l7:u8:h
    %l8:u8:i
    %l9:u1:t0
    %l10:u1:t1
    %l11:u1:t2
    %l12:u1:t3
    %l13:u1:t4

block b0:
  %b0:i0:i32 = minus 1:i32
  %b0:i1:u8 = typecast %b0:i0:i32 to u8
  %b0:i2:unit = store %b0:i1:u8 %l0:u8*
  %b0:i3:i32 = minus 128:i32
  %b0:i4:u8 = typecast %b0:i3:i32 to u8
  %b0:i5:unit = store %b0:i4:u8 %l1:u8*
  %b0:i6:u8 = typecast 127:i32 to u8
  %b0:i7:unit = store %b0:i6:u8 %l2:u8*
  %b0:i8:u8 = load %l1:u8*
  %b0:i9:u8 = load %l0:u8*
  %b0:i10:i32 = typecast %b0:i8:u8 to i32
  %b0:i11:i32 = typecast %b0:i9:u8 to i32
  %b0:i12:i32 = or %b0:i10:i32 %b0:i11:i32
  %b0:i13:u8 = typecast %b0:i12:i32 to u8
  %b0:i14:unit = store %b0:i13:u8 %l3:u8*
  %b0:i15:u8 = load %l1:u8*
  %b0:i16:u8 = load %l0:u8*
  %b0:i17:i32 = typecast %b0:i15:u8 to i32
  %b0:i18:i32 = typecast %b0:i16:u8 to i32
  %b0:i19:i32 = and %b0:i17:i32 %b0:i18:i32
  %b0:i20:u8 = typecast %b0:i19:i32 to u8
  %b0:i21:unit = store %b0:i20:u8 %l4:u8*
  %b0:i22:u8 = load %l1:u8*
  %b0:i23:u8 = load %l2:u8*
  %b0:i24:i32 = typecast %b0:i22:u8 to i32
  %b0:i25:i32 = typecast %b0:i23:u8 to i32
  %b0:i26:i32 = and %b0:i24:i32 %b0:i25:i32
  %b0:i27:u8 = typecast %b0:i26:i32 to u8
  %b0:i28:unit = store %b0:i27:u8 %l5:u8*
  %b0:i29:u8 = load %l1:u8*
  %b0:i30:u8 = load %l2:u8*
  %b0:i31:i32 = typecast %b0:i29:u8 to i32
  %b0:i32:i32 = typecast %b0:i30:u8 to i32
  %b0:i33:i32 = or %b0:i31:i32 %b0:i32:i32
  %b0:i34:u8 = typecast %b0:i33:i32 to u8
  %b0:i35:unit = store %b0:i34:u8 %l6:u8*
  %b0:i36:i32 = minus 1:i32
  %b0:i37:i32 = minus 1:i32
  %b0:i38:i32 = xor %b0:i36:i32 %b0:i37:i32
  %b0:i39:u8 = typecast %b0:i38:i32 to u8
  %b0:i40:unit = store %b0:i39:u8 %l7:u8*
  %b0:i41:i32 = minus 1:i32
  %b0:i42:i32 = xor %b0:i41:i32 0:i32
  %b0:i43:u8 = typecast %b0:i42:i32 to u8
  %b0:i44:unit = store %b0:i43:u8 %l8:u8*
  %b0:i45:u8 = load %l3:u8*
  %b0:i46:i32 = typecast %b0:i45:u8 to i32
  %b0:i47:u1 = cmp eq %b0:i46:i32 255:i32
  br %b0:i47:u1, b13(), b14()

block b1:
  %b1:i0:u8 = load %l8:u8*
  %b1:i1:i32 = typecast %b1:i0:u8 to i32
  %b1:i2:u1 = cmp eq %b1:i1:i32 255:i32
  %b1:i3:unit = store %b1:i2:u1 %l13:u1*
  j b3()

block b2:
  %b2:i0:unit = store 0:u1 %l13:u1*
  j b3()

block b3:
  %b3:i0:u1 = load %l13:u1*
  %b3:i1:i32 = typecast %b3:i0:u1 to i32
  ret %b3:i1:i32

block b4:
  %b4:i0:u8 = load %l7:u8*
  %b4:i1:i32 = typecast %b4:i0:u8 to i32
  %b4:i2:u1 = cmp eq %b4:i1:i32 0:i32
  %b4:i3:unit = store %b4:i2:u1 %l12:u1*
  j b6()

block b5:
  %b5:i0:unit = store 0:u1 %l12:u1*
  j b6()

block b6:
  %b6:i0:u1 = load %l12:u1*
  br %b6:i0:u1, b1(), b2()

block b7:
  %b7:i0:u8 = load %l6:u8*
  %b7:i1:i32 = typecast %b7:i0:u8 to i32
  %b7:i2:u1 = cmp eq %b7:i1:i32 255:i32
  %b7:i3:unit = store %b7:i2:u1 %l11:u1*
  j b9()

block b8:
  %b8:i0:unit = store 0:u1 %l11:u1*
  j b9()

block b9:
  %b9:i0:u1 = load %l11:u1*
  br %b9:i0:u1, b4(), b5()

block b10:
  %b10:i0:u8 = load %l5:u8*
  %b10:i1:i32 = typecast %b10:i0:u8 to i32
  %b10:i2:u1 = cmp eq %b10:i1:i32 0:i32
  %b10:i3:unit = store %b10:i2:u1 %l10:u1*
  j b12()

block b11:
  %b11:i0:unit = store 0:u1 %l10:u1*
  j b12()

block b12:
  %b12:i0:u1 = load %l10:u1*
  br %b12:i0:u1, b7(), b8()

block b13:
  %b13:i0:u8 = load %l4:u8*
  %b13:i1:i32 = typecast %b13:i0:u8 to i32
  %b13:i2:u1 = cmp eq %b13:i1:i32 128:i32
  %b13:i3:unit = store %b13:i2:u1 %l9:u1*
  j b15()

block b14:
  %b14:i0:unit = store 0:u1 %l9:u1*
  j b15()

block b15:
  %b15:i0:u1 = load %l9:u1*
  br %b15:i0:u1, b10(), b11()
}
// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:u8:a
// CHECK-NEXT:     %l1:u8:b
// CHECK-NEXT:     %l2:u8:c
// CHECK-NEXT:     %l3:u8:d
// CHECK-NEXT:     %l4:u8:e
// CHECK-NEXT:     %l5:u8:f
// CHECK-NEXT:     %l6:u8:g
// CHECK-NEXT:     %l7:u8:h
// CHECK-NEXT:     %l8:u8:i
// CHECK-NEXT:     %l9:u1:t0
// CHECK-NEXT:     %l10:u1:t1
// CHECK-NEXT:     %l11:u1:t2
// CHECK-NEXT:     %l12:u1:t3
// CHECK-NEXT:     %l13:u1:t4

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i1:u8 = typecast %b0:i0:i32 to u8
// CHECK-NEXT:   %b0:i2:unit = nop
// CHECK-NEXT:   %b0:i3:i32 = minus 128:i32
// CHECK-NEXT:   %b0:i4:u8 = typecast %b0:i3:i32 to u8
// CHECK-NEXT:   %b0:i5:unit = nop
// CHECK-NEXT:   %b0:i6:u8 = typecast 127:i32 to u8
// CHECK-NEXT:   %b0:i7:unit = nop
// CHECK-NEXT:   %b0:i8:unit = nop
// CHECK-NEXT:   %b0:i9:unit = nop
// CHECK-NEXT:   %b0:i10:i32 = typecast %b0:i4:u8 to i32
// CHECK-NEXT:   %b0:i11:i32 = typecast %b0:i1:u8 to i32
// CHECK-NEXT:   %b0:i12:i32 = or %b0:i10:i32 %b0:i11:i32
// CHECK-NEXT:   %b0:i13:u8 = typecast %b0:i12:i32 to u8
// CHECK-NEXT:   %b0:i14:unit = nop
// CHECK-NEXT:   %b0:i15:unit = nop
// CHECK-NEXT:   %b0:i16:unit = nop
// CHECK-NEXT:   %b0:i17:i32 = typecast %b0:i4:u8 to i32
// CHECK-NEXT:   %b0:i18:i32 = typecast %b0:i1:u8 to i32
// CHECK-NEXT:   %b0:i19:i32 = and %b0:i17:i32 %b0:i18:i32
// CHECK-NEXT:   %b0:i20:u8 = typecast %b0:i19:i32 to u8
// CHECK-NEXT:   %b0:i21:unit = nop
// CHECK-NEXT:   %b0:i22:unit = nop
// CHECK-NEXT:   %b0:i23:unit = nop
// CHECK-NEXT:   %b0:i24:i32 = typecast %b0:i4:u8 to i32
// CHECK-NEXT:   %b0:i25:i32 = typecast %b0:i6:u8 to i32
// CHECK-NEXT:   %b0:i26:i32 = and %b0:i24:i32 %b0:i25:i32
// CHECK-NEXT:   %b0:i27:u8 = typecast %b0:i26:i32 to u8
// CHECK-NEXT:   %b0:i28:unit = nop
// CHECK-NEXT:   %b0:i29:unit = nop
// CHECK-NEXT:   %b0:i30:unit = nop
// CHECK-NEXT:   %b0:i31:i32 = typecast %b0:i4:u8 to i32
// CHECK-NEXT:   %b0:i32:i32 = typecast %b0:i6:u8 to i32
// CHECK-NEXT:   %b0:i33:i32 = or %b0:i31:i32 %b0:i32:i32
// CHECK-NEXT:   %b0:i34:u8 = typecast %b0:i33:i32 to u8
// CHECK-NEXT:   %b0:i35:unit = nop
// CHECK-NEXT:   %b0:i36:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i37:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i38:i32 = xor %b0:i36:i32 %b0:i37:i32
// CHECK-NEXT:   %b0:i39:u8 = typecast %b0:i38:i32 to u8
// CHECK-NEXT:   %b0:i40:unit = nop
// CHECK-NEXT:   %b0:i41:i32 = minus 1:i32
// CHECK-NEXT:   %b0:i42:i32 = xor %b0:i41:i32 0:i32
// CHECK-NEXT:   %b0:i43:u8 = typecast %b0:i42:i32 to u8
// CHECK-NEXT:   %b0:i44:unit = nop
// CHECK-NEXT:   %b0:i45:unit = nop
// CHECK-NEXT:   %b0:i46:i32 = typecast %b0:i13:u8 to i32
// CHECK-NEXT:   %b0:i47:u1 = cmp eq %b0:i46:i32 255:i32
// CHECK-NEXT:   br %b0:i47:u1, b13(), b14()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:i0:unit = nop
// CHECK-NEXT:   %b1:i1:i32 = typecast %b0:i43:u8 to i32
// CHECK-NEXT:   %b1:i2:u1 = cmp eq %b1:i1:i32 255:i32
// CHECK-NEXT:   %b1:i3:unit = nop
// CHECK-NEXT:   j b3(%b1:i2:u1)

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   j b3(0:u1)

// CHECK-LABEL: block b3:
// CHECK-NEXT:   %b3:p0:u1:t4
// CHECK-NEXT:   %b3:i0:unit = nop
// CHECK-NEXT:   %b3:i1:i32 = typecast %b3:p0:u1 to i32
// CHECK-NEXT:   ret %b3:i1:i32

// CHECK-LABEL: block b4:
// CHECK-NEXT:   %b4:i0:unit = nop
// CHECK-NEXT:   %b4:i1:i32 = typecast %b0:i39:u8 to i32
// CHECK-NEXT:   %b4:i2:u1 = cmp eq %b4:i1:i32 0:i32
// CHECK-NEXT:   %b4:i3:unit = nop
// CHECK-NEXT:   j b6(%b4:i2:u1)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:i0:unit = nop
// CHECK-NEXT:   j b6(0:u1)

// CHECK-LABEL: block b6:
// CHECK-NEXT:   %b6:p0:u1:t3
// CHECK-NEXT:   %b6:i0:unit = nop
// CHECK-NEXT:   br %b6:p0:u1, b1(), b2()

// CHECK-LABEL: block b7:
// CHECK-NEXT:   %b7:i0:unit = nop
// CHECK-NEXT:   %b7:i1:i32 = typecast %b0:i34:u8 to i32
// CHECK-NEXT:   %b7:i2:u1 = cmp eq %b7:i1:i32 255:i32
// CHECK-NEXT:   %b7:i3:unit = nop
// CHECK-NEXT:   j b9(%b7:i2:u1)

// CHECK-LABEL: block b8:
// CHECK-NEXT:   %b8:i0:unit = nop
// CHECK-NEXT:   j b9(0:u1)

// CHECK-LABEL: block b9:
// CHECK-NEXT:   %b9:p0:u1:t2
// CHECK-NEXT:   %b9:i0:unit = nop
// CHECK-NEXT:   br %b9:p0:u1, b4(), b5()

// CHECK-LABEL: block b10:
// CHECK-NEXT:   %b10:i0:unit = nop
// CHECK-NEXT:   %b10:i1:i32 = typecast %b0:i27:u8 to i32
// CHECK-NEXT:   %b10:i2:u1 = cmp eq %b10:i1:i32 0:i32
// CHECK-NEXT:   %b10:i3:unit = nop
// CHECK-NEXT:   j b12(%b10:i2:u1)

// CHECK-LABEL: block b11:
// CHECK-NEXT:   %b11:i0:unit = nop
// CHECK-NEXT:   j b12(0:u1)

// CHECK-LABEL: block b12:
// CHECK-NEXT:   %b12:p0:u1:t1
// CHECK-NEXT:   %b12:i0:unit = nop
// CHECK-NEXT:   br %b12:p0:u1, b7(), b8()

// CHECK-LABEL: block b13:
// CHECK-NEXT:   %b13:i0:unit = nop
// CHECK-NEXT:   %b13:i1:i32 = typecast %b0:i20:u8 to i32
// CHECK-NEXT:   %b13:i2:u1 = cmp eq %b13:i1:i32 128:i32
// CHECK-NEXT:   %b13:i3:unit = nop
// CHECK-NEXT:   j b15(%b13:i2:u1)

// CHECK-LABEL: block b14:
// CHECK-NEXT:   %b14:i0:unit = nop
// CHECK-NEXT:   j b15(0:u1)

// CHECK-LABEL: block b15:
// CHECK-NEXT:   %b15:p0:u1:t0
// CHECK-NEXT:   %b15:i0:unit = nop
// CHECK-NEXT:   br %b15:p0:u1, b10(), b11()
// CHECK-NEXT: }
