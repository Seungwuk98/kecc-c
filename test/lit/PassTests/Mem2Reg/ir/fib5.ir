// RUN: kecc-opt %s --mem2reg | FileCheck %s


fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 
    %l0:i32:n
    %l1:i32:i
    %l2:i32:t1
    %l3:i32:t2
    %l4:i32:next_term

block b0:
  %b0:p0:i32:n
  %b0:i0:unit = store %b0:p0:i32 %l0:i32*
  %b0:i1:unit = store 0:i32 %l1:i32*
  %b0:i2:unit = store 0:i32 %l2:i32*
  %b0:i3:unit = store 1:i32 %l3:i32*
  %b0:i4:unit = store 0:i32 %l4:i32*
  %b0:i5:i32 = load %l0:i32*
  %b0:i6:u1 = cmp lt %b0:i5:i32 2:i32
  br %b0:i6:u1, b1(), b2()

block b1:
  %b1:i0:i32 = load %l0:i32*
  ret %b1:i0:i32

block b2:
  %b2:i0:unit = store 1:i32 %l1:i32*
  j b5()

block b5:
  %b5:i0:i32 = load %l2:i32*
  %b5:i1:i32 = load %l3:i32*
  %b5:i2:i32 = add %b5:i0:i32 %b5:i1:i32
  %b5:i3:unit = store %b5:i2:i32 %l4:i32*
  %b5:i4:i32 = load %l3:i32*
  %b5:i5:unit = store %b5:i4:i32 %l2:i32*
  %b5:i6:i32 = load %l4:i32*
  %b5:i7:unit = store %b5:i6:i32 %l3:i32*
  %b5:i8:i32 = load %l1:i32*
  %b5:i9:i32 = add %b5:i8:i32 1:i32
  %b5:i10:unit = store %b5:i9:i32 %l1:i32*
  %b5:i11:i32 = load %l1:i32*
  %b5:i12:i32 = load %l0:i32*
  %b5:i13:u1 = cmp lt %b5:i11:i32 %b5:i12:i32
  br %b5:i13:u1, b5(), b7()

block b7:
  %b7:i0:i32 = load %l3:i32*
  ret %b7:i0:i32
}
// CHECK: fun i32 @fibonacci (i32) {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:
// CHECK-NEXT:     %l0:i32:n
// CHECK-NEXT:     %l1:i32:i
// CHECK-NEXT:     %l2:i32:t1
// CHECK-NEXT:     %l3:i32:t2
// CHECK-NEXT:     %l4:i32:next_term

// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:p0:i32:n
// CHECK-NEXT:   %b0:i0:unit = nop
// CHECK-NEXT:   %b0:i1:unit = nop
// CHECK-NEXT:   %b0:i2:unit = nop
// CHECK-NEXT:   %b0:i3:unit = nop
// CHECK-NEXT:   %b0:i4:unit = nop
// CHECK-NEXT:   %b0:i5:unit = nop
// CHECK-NEXT:   %b0:i6:u1 = cmp lt %b0:p0:i32 2:i32
// CHECK-NEXT:   br %b0:i6:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT:   %b1:i0:unit = nop
// CHECK-NEXT:   ret %b0:p0:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT:   %b2:i0:unit = nop
// CHECK-NEXT:   j b5(1:i32, 0:i32, 1:i32)

// CHECK-LABEL: block b5:
// CHECK-NEXT:   %b5:p0:i32:i
// CHECK-NEXT:   %b5:p1:i32:t1
// CHECK-NEXT:   %b5:p2:i32:t2
// CHECK-NEXT:   %b5:i0:unit = nop
// CHECK-NEXT:   %b5:i1:unit = nop
// CHECK-NEXT:   %b5:i2:i32 = add %b5:p1:i32 %b5:p2:i32
// CHECK-NEXT:   %b5:i3:unit = nop
// CHECK-NEXT:   %b5:i4:unit = nop
// CHECK-NEXT:   %b5:i5:unit = nop
// CHECK-NEXT:   %b5:i6:unit = nop
// CHECK-NEXT:   %b5:i7:unit = nop
// CHECK-NEXT:   %b5:i8:unit = nop
// CHECK-NEXT:   %b5:i9:i32 = add %b5:p0:i32 1:i32
// CHECK-NEXT:   %b5:i10:unit = nop
// CHECK-NEXT:   %b5:i11:unit = nop
// CHECK-NEXT:   %b5:i12:unit = nop
// CHECK-NEXT:   %b5:i13:u1 = cmp lt %b5:i9:i32 %b0:p0:i32
// CHECK-NEXT:   br %b5:i13:u1, b5(%b5:i9:i32, %b5:p2:i32, %b5:i2:i32), b7()

// CHECK-LABEL: block b7:
// CHECK-NEXT:   %b7:i0:unit = nop
// CHECK-NEXT:   ret %b5:i2:i32
// CHECK-NEXT: }

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
  %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
  %b0:i2:i32 = typecast %b0:i1:u1 to i32
  ret %b0:i2:i32
}
// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT:   bid: b0
// CHECK-NEXT:   allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT:   %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
// CHECK-NEXT:   %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
// CHECK-NEXT:   %b0:i2:i32 = typecast %b0:i1:u1 to i32
// CHECK-NEXT:   ret %b0:i2:i32
// CHECK-NEXT: }
