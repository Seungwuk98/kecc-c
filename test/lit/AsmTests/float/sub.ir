// RUN: kecc-test-executor %s -dump-source=0 | kecc-translate | FileCheck %s


fun f32 @sub_f32 (f32, f32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:f32
  %b0:p1:f32
  %b0:i0:f32 = sub %b0:p0:f32 %b0:p1:f32
  ret %b0:i0:f32
}

// CHECK:   .globl        sub_f32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type sub_f32, @function
// CHECK-NEXT: sub_f32:

// CHECK-LABEL: .sub_f32_L0:
// CHECK-NEXT:   fsub.s        fa0,fa0,fa1
// CHECK-NEXT:   ret


fun f64 @sub_f64 (f64, f64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:f64
  %b0:p1:f64
  %b0:i0:f64 = sub %b0:p0:f64 %b0:p1:f64
  ret %b0:i0:f64
}

// CHECK:   .globl        sub_f64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type sub_f64, @function
// CHECK-NEXT: sub_f64:

// CHECK-LABEL: .sub_f64_L0:
// CHECK-NEXT:   fsub.d        fa0,fa0,fa1
// CHECK-NEXT:   ret


/////// main.c 
// RUN: kecc-test-executor %s | FileCheck %s --check-prefix=RESULT
#include <stdio.h>
#include <stdint.h>
#include <math.h>

extern float  sub_f32(float, float);
extern double sub_f64(double, double);

int main(void) {
  // ===== f32 (float) =====
  printf("%a\n", (double) sub_f32(0.0f, 0.0f));
  // RESULT: 0x0p+0
  printf("%a\n", (double) sub_f32(0.0f, -0.0f));
  // RESULT: 0x0p+0
  printf("%a\n", (double) sub_f32(-0.0f, 0.0f));
  // RESULT: -0x0p+0
  printf("%a\n", (double) sub_f32(-0.0f, -0.0f));
  // RESULT: 0x0p+0

  printf("%a\n", (double) sub_f32(1.0f, 2.0f));
  // RESULT: -0x1p+0
  printf("%a\n", (double) sub_f32(-1.0f, 2.0f));
  // RESULT: -0x1.8p+1
  printf("%a\n", (double) sub_f32(2.0f, -1.0f));
  // RESULT: 0x1.8p+1

  printf("%a\n", (double) sub_f32(0x1p+24f, 2.0f));          // 2^24 - 2 (exact)
  // RESULT: 0x1.fffffcp+23
  printf("%a\n", (double) sub_f32(0x1.000002p+0f, 1.0f));    // (1 + 2^-23) - 1 = 2^-23
  // RESULT: 0x1p-23
  printf("%a\n", (double) sub_f32(0x1p-149f, 0x1p-149f));    // min subnormal - itself
  // RESULT: 0x0p+0
  printf("%a\n", (double) sub_f32(1.0f, 0x1p-149f));         // tiny subtraction -> unchanged
  // RESULT: 0x1p+0
  printf("%a\n", (double) sub_f32(0x1p-149f, 1.0f));         // dominated by 1.0
  // RESULT: -0x1p+0

  printf("%a\n", (double) sub_f32(0x1.fffffep+127f, -0x1.fffffep+127f)); // FLT_MAX - (-FLT_MAX)
  // RESULT: inf
  printf("%a\n", (double) sub_f32(0x1.fffffep+127f, 0x1.fffffep+127f));  // FLT_MAX - FLT_MAX
  // RESULT: 0x0p+0

  printf("%a\n", (double) sub_f32(INFINITY, 1.0f));
  // RESULT: inf
  printf("%a\n", (double) sub_f32(-INFINITY, 1.0f));
  // RESULT: -inf
  printf("%a\n", (double) sub_f32(INFINITY, INFINITY));
  // RESULT: nan
  printf("%a\n", (double) sub_f32(NAN, 1.0f));
  // RESULT: nan
  printf("%a\n", (double) sub_f32(1.0e-30f, 1.0e-30f));      // cancellation -> +0
  // RESULT: 0x0p+0

  // ===== f64 (double) =====
  printf("%a\n", sub_f64(0.0, 0.0));
  // RESULT: 0x0p+0
  printf("%a\n", sub_f64(0.0, -0.0));
  // RESULT: 0x0p+0
  printf("%a\n", sub_f64(-0.0, 0.0));
  // RESULT: -0x0p+0
  printf("%a\n", sub_f64(-0.0, -0.0));
  // RESULT: 0x0p+0

  printf("%a\n", sub_f64(1.0, 2.0));
  // RESULT: -0x1p+0
  printf("%a\n", sub_f64(-1.0, 2.0));
  // RESULT: -0x1.8p+1
  printf("%a\n", sub_f64(2.0, -1.0));
  // RESULT: 0x1.8p+1

  printf("%a\n", sub_f64(0x1p+53, 1.0));                     // 2^53 - 1 (exact)
  // RESULT: 0x1.fffffffffffffp+52
  printf("%a\n", sub_f64(0x1.0000000000001p+0, 1.0));        // (1 + 2^-52) - 1 = 2^-52
  // RESULT: 0x1p-52
  printf("%a\n", sub_f64(0x1p-1074, 0x1p-1074));             // min subnormal - itself
  // RESULT: 0x0p+0
  printf("%a\n", sub_f64(1.0, 0x1p-1074));                   // tiny subtraction -> unchanged
  // RESULT: 0x1p+0
  printf("%a\n", sub_f64(0x1p-1074, 1.0));                   // dominated by 1.0
  // RESULT: -0x1p+0

  printf("%a\n", sub_f64(0x1.fffffffffffffp+1023, -0x1.fffffffffffffp+1023)); // DBL_MAX - (-DBL_MAX)
  // RESULT: inf
  printf("%a\n", sub_f64(0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023));  // DBL_MAX - DBL_MAX
  // RESULT: 0x0p+0

  printf("%a\n", sub_f64(INFINITY, 1.0));
  // RESULT: inf
  printf("%a\n", sub_f64(-INFINITY, 1.0));
  // RESULT: -inf
  printf("%a\n", sub_f64(INFINITY, INFINITY));
  // RESULT: nan
  printf("%a\n", sub_f64(NAN, 1.0));
  // RESULT: nan
  printf("%a\n", sub_f64(1.0e300, 1.0e300));                 // cancellation -> +0
  // RESULT: 0x0p+0

  return 0;
}

