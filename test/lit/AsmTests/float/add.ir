// RUN: kecc-test-executor %s -dump-source=0 | kecc-translate | FileCheck %s


fun f32 @add_f32 (f32, f32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:f32
  %b0:p1:f32
  %b0:i0:f32 = add %b0:p0:f32 %b0:p1:f32
  ret %b0:i0:f32
}

// CHECK:   .globl        add_f32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type add_f32, @function
// CHECK-NEXT: add_f32:

// CHECK-LABEL: .add_f32_L0:
// CHECK-NEXT:   fadd.s        fa0,fa0,fa1
// CHECK-NEXT:   ret


fun f64 @add_f64 (f64, f64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:f64
  %b0:p1:f64
  %b0:i0:f64 = add %b0:p0:f64 %b0:p1:f64
  ret %b0:i0:f64
}

// CHECK:   .globl        add_f64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type add_f64, @function
// CHECK-NEXT: add_f64:

// CHECK-LABEL: .add_f64_L0:
// CHECK-NEXT:   fadd.d        fa0,fa0,fa1
// CHECK-NEXT:   ret


/////// main.c 
// RUN: kecc-test-executor %s | FileCheck %s --check-prefix=RESULT

#include <stdio.h>
#include <stdint.h>
#include <math.h>

extern float  add_f32(float, float);
extern double add_f64(double, double);

int main(void) {
  // ===== f32 (float) =====
  printf("%a\n", (double) add_f32(0.0f, 0.0f));
  // RESULT: 0x0p+0
  printf("%a\n", (double) add_f32(-0.0f, -0.0f));
  // RESULT: -0x0p+0
  printf("%a\n", (double) add_f32(-0.0f, 0.0f));
  // RESULT: 0x0p+0
  printf("%a\n", (double) add_f32(1.0f, 2.0f));
  // RESULT: 0x1.8p+1
  printf("%a\n", (double) add_f32(0x1p+24f, 1.0f));      // 2^24 + 1 -> unchanged
  // RESULT: 0x1p+24
  printf("%a\n", (double) add_f32(0x1p-149f, 0x1p-149f)); // min subnormal + min subnormal
  // RESULT: 0x1p-148
  printf("%a\n", (double) add_f32(0x1p-149f, 1.0f));      // too tiny to affect 1.0
  // RESULT: 0x1p+0
  printf("%a\n", (double) add_f32(0x1.fffffep+127f, 0x1.fffffep+127f)); // FLT_MAX + FLT_MAX
  // RESULT: inf
  printf("%a\n", (double) add_f32(0x1.fffffep+127f, -0x1.fffffep+127f)); // cancellation
  // RESULT: 0x0p+0
  printf("%a\n", (double) add_f32(INFINITY, 1.0f));
  // RESULT: inf
  printf("%a\n", (double) add_f32(-INFINITY, -1.0f));
  // RESULT: -inf
  printf("%a\n", (double) add_f32(INFINITY, -INFINITY));
  // RESULT: nan
  printf("%a\n", (double) add_f32(NAN, 1.0f));
  // RESULT: nan
  printf("%a\n", (double) add_f32(0.5f, 0.5f));
  // RESULT: 0x1p+0
  printf("%a\n", (double) add_f32(1.0e-30f, -1.0e-30f)); // cancellation to +0
  // RESULT: 0x0p+0

  // ===== f64 (double) =====
  printf("%a\n", add_f64(0.0, 0.0));
  // RESULT: 0x0p+0
  printf("%a\n", add_f64(-0.0, -0.0));
  // RESULT: -0x0p+0
  printf("%a\n", add_f64(-0.0, 0.0));
  // RESULT: 0x0p+0
  printf("%a\n", add_f64(1.0, 2.0));
  // RESULT: 0x1.8p+1
  printf("%a\n", add_f64(0x1p+53, 1.0));                 // 2^53 + 1 -> unchanged
  // RESULT: 0x1p+53
  printf("%a\n", add_f64(0x1p-1074, 0x1p-1074));         // min subnormal + min subnormal
  // RESULT: 0x0.0000000000002p-1022
  printf("%a\n", add_f64(0x1p-1074, 1.0));               // too tiny to affect 1.0
  // RESULT: 0x1p+0
  printf("%a\n", add_f64(0x1.fffffffffffffp+1023, 0x1.fffffffffffffp+1023)); // DBL_MAX + DBL_MAX
  // RESULT: inf
  printf("%a\n", add_f64(0x1.fffffffffffffp+1023, -0x1.fffffffffffffp+1023)); // cancellation
  // RESULT: 0x0p+0
  printf("%a\n", add_f64(INFINITY, 1.0));
  // RESULT: inf
  printf("%a\n", add_f64(-INFINITY, -1.0));
  // RESULT: -inf
  printf("%a\n", add_f64(INFINITY, -INFINITY));
  // RESULT: nan
  printf("%a\n", add_f64(NAN, 1.0));
  // RESULT: nan
  printf("%a\n", add_f64(1.0e300, -1.0e300));            // cancellation to +0
  // RESULT: 0x0p+0
  printf("%a\n", add_f64(0.5, 0.5));
  // RESULT: 0x1p+0

  return 0;
}


