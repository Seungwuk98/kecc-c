// RUN: kecc-test-executor %s --dump-source=0 | kecc-translate | FileCheck %s 

fun i1 @xor_i1 (i1, i1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i1
  %b0:p1:i1
  %b0:i0:i1 = xor %b0:p0:i1 %b0:p1:i1
  ret %b0:i0:i1
}

// CHECK:   .globl        xor_i1
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_i1, @function
// CHECK-NEXT: xor_i1:

// CHECK-LABEL: .xor_i1_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun i8 @xor_i8 (i8, i8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i8
  %b0:p1:i8
  %b0:i0:i8 = xor %b0:p0:i8 %b0:p1:i8
  ret %b0:i0:i8
}

// CHECK:   .globl        xor_i8
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_i8, @function
// CHECK-NEXT: xor_i8:

// CHECK-LABEL: .xor_i8_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun i16 @xor_i16 (i16, i16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i16
  %b0:p1:i16
  %b0:i0:i16 = xor %b0:p0:i16 %b0:p1:i16
  ret %b0:i0:i16
}

// CHECK:   .globl        xor_i16
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_i16, @function
// CHECK-NEXT: xor_i16:

// CHECK-LABEL: .xor_i16_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun i32 @xor_i32 (i32, i32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i32
  %b0:p1:i32
  %b0:i0:i32 = xor %b0:p0:i32 %b0:p1:i32
  ret %b0:i0:i32
}

// CHECK:   .globl        xor_i32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_i32, @function
// CHECK-NEXT: xor_i32:

// CHECK-LABEL: .xor_i32_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun i64 @xor_i64 (i64, i64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i64
  %b0:p1:i64
  %b0:i0:i64 = xor %b0:p0:i64 %b0:p1:i64
  ret %b0:i0:i64
}

// CHECK:   .globl        xor_i64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_i64, @function
// CHECK-NEXT: xor_i64:

// CHECK-LABEL: .xor_i64_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun u1 @xor_u1 (u1, u1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u1
  %b0:p1:u1
  %b0:i0:u1 = xor %b0:p0:u1 %b0:p1:u1
  ret %b0:i0:u1
}

// CHECK:   .globl        xor_u1
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_u1, @function
// CHECK-NEXT: xor_u1:

// CHECK-LABEL: .xor_u1_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun u8 @xor_u8 (u8, u8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u8
  %b0:p1:u8
  %b0:i0:u8 = xor %b0:p0:u8 %b0:p1:u8
  ret %b0:i0:u8
}

// CHECK:   .globl        xor_u8
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_u8, @function
// CHECK-NEXT: xor_u8:

// CHECK-LABEL: .xor_u8_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun u16 @xor_u16 (u16, u16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u16
  %b0:p1:u16
  %b0:i0:u16 = xor %b0:p0:u16 %b0:p1:u16
  ret %b0:i0:u16
}

// CHECK:   .globl        xor_u16
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_u16, @function
// CHECK-NEXT: xor_u16:

// CHECK-LABEL: .xor_u16_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun u32 @xor_u32 (u32, u32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u32
  %b0:p1:u32
  %b0:i0:u32 = xor %b0:p0:u32 %b0:p1:u32
  ret %b0:i0:u32
}

// CHECK:   .globl        xor_u32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_u32, @function
// CHECK-NEXT: xor_u32:

// CHECK-LABEL: .xor_u32_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


fun u64 @xor_u64 (u64, u64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u64
  %b0:p1:u64
  %b0:i0:u64 = xor %b0:p0:u64 %b0:p1:u64
  ret %b0:i0:u64
}

// CHECK:   .globl        xor_u64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type xor_u64, @function
// CHECK-NEXT: xor_u64:

// CHECK-LABEL: .xor_u64_L0:
// CHECK-NEXT:   xor   a0,a0,a1
// CHECK-NEXT:   ret


/////// main.c 
// RUN: kecc-test-executor %s | FileCheck %s --check-prefix=RESULT

#include <stdio.h>
#include <stdint.h>

extern _Bool   xor_i1(_Bool, _Bool);
extern int8_t  xor_i8(int8_t, int8_t);
extern int16_t xor_i16(int16_t, int16_t);
extern int32_t xor_i32(int32_t, int32_t);
extern int64_t xor_i64(int64_t, int64_t);

extern _Bool    xor_u1(_Bool, _Bool);
extern uint8_t  xor_u8(uint8_t, uint8_t);
extern uint16_t xor_u16(uint16_t, uint16_t);
extern uint32_t xor_u32(uint32_t, uint32_t);
extern uint64_t xor_u64(uint64_t, uint64_t);

int main(void) {
  // ===== i1 =====
  printf("%d\n", (int) xor_i1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) xor_i1(0, 1));
  // RESULT: 1
  printf("%d\n", (int) xor_i1(1, 0));
  // RESULT: 1
  printf("%d\n", (int) xor_i1(1, 1));
  // RESULT: 0

  // ===== u1 =====
  printf("%d\n", (int) xor_u1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) xor_u1(0, 1));
  // RESULT: 1
  printf("%d\n", (int) xor_u1(1, 0));
  // RESULT: 1
  printf("%d\n", (int) xor_u1(1, 1));
  // RESULT: 0

  // ===== i8 =====
  printf("%d\n", (int) xor_i8(0, 0));
  // RESULT: 0
  printf("%d\n", (int) xor_i8(-1, 0));
  // RESULT: -1
  printf("%d\n", (int) xor_i8(0x55, 0xAA));
  // RESULT: -1
  printf("%d\n", (int) xor_i8(0x7F, 0x80));
  // RESULT: -1
  printf("%d\n", (int) xor_i8(-128, -1));
  // RESULT: 127
  printf("%d\n", (int) xor_i8(100, 27));
  // RESULT: 127
  printf("%d\n", (int) xor_i8(-100, 0x0F));
  // RESULT: -109
  printf("%d\n", (int) xor_i8(50, 5));
  // RESULT: 55
  printf("%d\n", (int) xor_i8(-1, -1));
  // RESULT: 0
  printf("%d\n", (int) xor_i8(-2, 1));
  // RESULT: -1

  // ===== u8 =====
  printf("%u\n", (unsigned) xor_u8(0u, 0u));
  // RESULT: 0
  printf("%u\n", (unsigned) xor_u8(0xF0u, 0x0Fu));
  // RESULT: 255
  printf("%u\n", (unsigned) xor_u8(255u, 1u));
  // RESULT: 254
  printf("%u\n", (unsigned) xor_u8(200u, 55u));
  // RESULT: 255
  printf("%u\n", (unsigned) xor_u8(250u, 10u));
  // RESULT: 240
  printf("%u\n", (unsigned) xor_u8(128u, 128u));
  // RESULT: 0
  printf("%u\n", (unsigned) xor_u8(2u, 7u));
  // RESULT: 5
  printf("%u\n", (unsigned) xor_u8(3u, 6u));
  // RESULT: 5
  printf("%u\n", (unsigned) xor_u8(127u, 255u));
  // RESULT: 128
  printf("%u\n", (unsigned) xor_u8(0u, 255u));
  // RESULT: 255

  // ===== i16 =====
  printf("%d\n", (int) xor_i16(0xAAAA, 0x5555));
  // RESULT: -1
  printf("%d\n", (int) xor_i16(-1, 12345));
  // RESULT: -12346
  printf("%d\n", (int) xor_i16(-1, -1));
  // RESULT: 0
  printf("%d\n", (int) xor_i16(-32768, 1));
  // RESULT: -32767
  printf("%d\n", (int) xor_i16(32767, -2));
  // RESULT: -32767
  printf("%d\n", (int) xor_i16(30000, 10000));
  // RESULT: 21024
  printf("%d\n", (int) xor_i16(0x7FFF, 0x8000));
  // RESULT: -1
  printf("%d\n", (int) xor_i16(-30000, -10000));
  // RESULT: 21024
  printf("%d\n", (int) xor_i16(32767, 0));
  // RESULT: 32767
  printf("%d\n", (int) xor_i16(-32768, -32768));
  // RESULT: 0

  // ===== u16 =====
  printf("%u\n", (unsigned) xor_u16(0xF0F0u, 0x0FF0u));
  // RESULT: 65280
  printf("%u\n", (unsigned) xor_u16(50000u, 20000u));
  // RESULT: 36208
  printf("%u\n", (unsigned) xor_u16(65535u, 0u));
  // RESULT: 65535
  printf("%u\n", (unsigned) xor_u16(0u, 12345u));
  // RESULT: 12345
  printf("%u\n", (unsigned) xor_u16(32768u, 32767u));
  // RESULT: 65535
  printf("%u\n", (unsigned) xor_u16(1u, 65535u));
  // RESULT: 65534
  printf("%u\n", (unsigned) xor_u16(12345u, 54321u));
  // RESULT: 58376
  printf("%u\n", (unsigned) xor_u16(0x8000u, 1u));
  // RESULT: 32769
  printf("%u\n", (unsigned) xor_u16(2u, 4u));
  // RESULT: 6
  printf("%u\n", (unsigned) xor_u16(0u, 0u));
  // RESULT: 0

  // ===== i32 =====
  printf("%d\n", xor_i32(0, 0));
  // RESULT: 0
  printf("%d\n", xor_i32(-1, 0));
  // RESULT: -1
  printf("%d\n", xor_i32(1, 2));
  // RESULT: 3
  printf("%d\n", xor_i32(1024, 512));
  // RESULT: 1536
  printf("%d\n", xor_i32(-2147483648, 1));
  // RESULT: -2147483647
  printf("%d\n", xor_i32(2147483647, 1));
  // RESULT: 2147483646
  printf("%d\n", xor_i32(0x40000000, 0x40000000));
  // RESULT: 0
  printf("%d\n", xor_i32(0x20000000, 0x40000000));
  // RESULT: 1610612736
  printf("%d\n", xor_i32(-2147483648, 2147483647));
  // RESULT: -1
  printf("%d\n", xor_i32(0xAAAAAAAA, 0x55555555));
  // RESULT: -1
  printf("%d\n", xor_i32(123456789, 0));
  // RESULT: 123456789

  // ===== u32 =====
  printf("%u\n", (unsigned) xor_u32(0u, 0u));
  // RESULT: 0
  printf("%u\n", (unsigned) xor_u32(1u, 2u));
  // RESULT: 3
  printf("%u\n", (unsigned) xor_u32(2147483648u, 1u));
  // RESULT: 2147483649
  printf("%u\n", (unsigned) xor_u32(2147483648u, 2147483648u));
  // RESULT: 0
  printf("%u\n", (unsigned) xor_u32(0x80000000u, 0x7FFFFFFFu));
  // RESULT: 4294967295
  printf("%u\n", (unsigned) xor_u32(0xAAAAAAAAu, 0x55555555u));
  // RESULT: 4294967295
  printf("%u\n", (unsigned) xor_u32(0xFFFFFFFFu, 0u));
  // RESULT: 4294967295
  printf("%u\n", (unsigned) xor_u32(256u, 1u));
  // RESULT: 257
  printf("%u\n", (unsigned) xor_u32(4000000000u, 0u));
  // RESULT: 4000000000
  printf("%u\n", (unsigned) xor_u32(0u, 4294967295u));
  // RESULT: 4294967295

  // ===== i64 =====
  printf("%lld\n", (long long) xor_i64(0ll, 0ll));
  // RESULT: 0
  printf("%lld\n", (long long) xor_i64(-1ll, 0ll));
  // RESULT: -1
  printf("%lld\n", (long long) xor_i64(1ll, 2ll));
  // RESULT: 3
  printf("%lld\n", (long long) xor_i64(1ll<<62, 1ll<<61));
  // RESULT: 6917529027641081856
  printf("%lld\n", (long long) xor_i64(-9223372036854775808ll, 1ll));
  // RESULT: -9223372036854775807
  printf("%lld\n", (long long) xor_i64(0x7FFFFFFFFFFFFFFFll, 0x8000000000000000ll));
  // RESULT: -1
  printf("%lld\n", (long long) xor_i64(0x4000000000000000ll, 0x4000000000000000ll));
  // RESULT: 0
  printf("%lld\n", (long long) xor_i64(0x4000000000000000ll, 0x8000000000000000ll));
  // RESULT: -4611686018427387904
  printf("%lld\n", (long long) xor_i64(1234567890123456789ll, 0ll));
  // RESULT: 1234567890123456789
  printf("%lld\n", (long long) xor_i64(0ll, -1ll));
  // RESULT: -1
  printf("%lld\n", (long long) xor_i64(-9223372036854775808ll, -1ll));
  // RESULT: 9223372036854775807

  // ===== u64 =====
  printf("%llu\n", (unsigned long long) xor_u64(0ull, 0ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) xor_u64(1ull, 2ull));
  // RESULT: 3
  printf("%llu\n", (unsigned long long) xor_u64(9223372036854775808ull, 1ull));
  // RESULT: 9223372036854775809
  printf("%llu\n", (unsigned long long) xor_u64(1ull<<63, 1ull<<62));
  // RESULT: 13835058055282163712
  printf("%llu\n", (unsigned long long) xor_u64(0xFFFFFFFFFFFFFFFFull, 0ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) xor_u64(0xAAAAAAAAAAAAAAAAull, 0x5555555555555555ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) xor_u64(256ull, 1ull));
  // RESULT: 257
  printf("%llu\n", (unsigned long long) xor_u64(0ull, 18446744073709551615ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) xor_u64(9223372036854775808ull, 9223372036854775808ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) xor_u64(18000000000000000000ull, 0ull));
  // RESULT: 18000000000000000000

  return 0;
}



