// RUN: kecc-test-executor %s --dump-source=0 | kecc-translate | FileCheck %s 


fun i1 @mul_i1 (i1, i1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i1
  %b0:p1:i1
  %b0:i0:i1 = mul %b0:p0:i1 %b0:p1:i1
  ret %b0:i0:i1
}

// CHECK:   .globl        mul_i1
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_i1, @function
// CHECK-NEXT: mul_i1:

// CHECK-LABEL: .mul_i1_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   andi  a0,a0,1
// CHECK-NEXT:   ret


fun i8 @mul_i8 (i8, i8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i8
  %b0:p1:i8
  %b0:i0:i8 = mul %b0:p0:i8 %b0:p1:i8
  ret %b0:i0:i8
}

// CHECK:   .globl        mul_i8
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_i8, @function
// CHECK-NEXT: mul_i8:

// CHECK-LABEL: .mul_i8_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   slli  a0,a0,56
// CHECK-NEXT:   srai  a0,a0,56
// CHECK-NEXT:   ret


fun i16 @mul_i16 (i16, i16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i16
  %b0:p1:i16
  %b0:i0:i16 = mul %b0:p0:i16 %b0:p1:i16
  ret %b0:i0:i16
}

// CHECK:   .globl        mul_i16
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_i16, @function
// CHECK-NEXT: mul_i16:

// CHECK-LABEL: .mul_i16_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   slli  a0,a0,48
// CHECK-NEXT:   srai  a0,a0,48
// CHECK-NEXT:   ret


fun i32 @mul_i32 (i32, i32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i32
  %b0:p1:i32
  %b0:i0:i32 = mul %b0:p0:i32 %b0:p1:i32
  ret %b0:i0:i32
}

// CHECK:   .globl        mul_i32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_i32, @function
// CHECK-NEXT: mul_i32:

// CHECK-LABEL: .mul_i32_L0:
// CHECK-NEXT:   mulw  a0,a0,a1
// CHECK-NEXT:   ret


fun i64 @mul_i64 (i64, i64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i64
  %b0:p1:i64
  %b0:i0:i64 = mul %b0:p0:i64 %b0:p1:i64
  ret %b0:i0:i64
}

// CHECK:   .globl        mul_i64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_i64, @function
// CHECK-NEXT: mul_i64:

// CHECK-LABEL: .mul_i64_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   ret


fun u1 @mul_u1 (u1, u1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u1
  %b0:p1:u1
  %b0:i0:u1 = mul %b0:p0:u1 %b0:p1:u1
  ret %b0:i0:u1
}

// CHECK:   .globl        mul_u1
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_u1, @function
// CHECK-NEXT: mul_u1:

// CHECK-LABEL: .mul_u1_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   andi  a0,a0,1
// CHECK-NEXT:   ret


fun u8 @mul_u8 (u8, u8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u8
  %b0:p1:u8
  %b0:i0:u8 = mul %b0:p0:u8 %b0:p1:u8
  ret %b0:i0:u8
}

// CHECK:   .globl        mul_u8
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_u8, @function
// CHECK-NEXT: mul_u8:

// CHECK-LABEL: .mul_u8_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   andi  a0,a0,255
// CHECK-NEXT:   ret


fun u16 @mul_u16 (u16, u16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u16
  %b0:p1:u16
  %b0:i0:u16 = mul %b0:p0:u16 %b0:p1:u16
  ret %b0:i0:u16
}

// CHECK:   .globl        mul_u16
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_u16, @function
// CHECK-NEXT: mul_u16:

// CHECK-LABEL: .mul_u16_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   slli  a0,a0,48
// CHECK-NEXT:   srli  a0,a0,48
// CHECK-NEXT:   ret


fun u32 @mul_u32 (u32, u32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u32
  %b0:p1:u32
  %b0:i0:u32 = mul %b0:p0:u32 %b0:p1:u32
  ret %b0:i0:u32
}

// CHECK:   .globl        mul_u32
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_u32, @function
// CHECK-NEXT: mul_u32:

// CHECK-LABEL: .mul_u32_L0:
// CHECK-NEXT:   mulw  a0,a0,a1
// CHECK-NEXT:   ret


fun u64 @mul_u64 (u64, u64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u64
  %b0:p1:u64
  %b0:i0:u64 = mul %b0:p0:u64 %b0:p1:u64
  ret %b0:i0:u64
}

// CHECK:   .globl        mul_u64
// CHECK-NEXT:   .align        1
// CHECK-NEXT:   .type mul_u64, @function
// CHECK-NEXT: mul_u64:

// CHECK-LABEL: .mul_u64_L0:
// CHECK-NEXT:   mul   a0,a0,a1
// CHECK-NEXT:   ret

///// main.c

#include <stdio.h>
#include <stdint.h>

extern _Bool   mul_i1(_Bool, _Bool);
extern int8_t  mul_i8(int8_t, int8_t);
extern int16_t mul_i16(int16_t, int16_t);
extern int32_t mul_i32(int32_t, int32_t);
extern int64_t mul_i64(int64_t, int64_t);

extern _Bool    mul_u1(_Bool, _Bool);
extern uint8_t  mul_u8(uint8_t, uint8_t);
extern uint16_t mul_u16(uint16_t, uint16_t);
extern uint32_t mul_u32(uint32_t, uint32_t);
extern uint64_t mul_u64(uint64_t, uint64_t);

int main(void) {
  // ===== i1 (mod 2) =====
  printf("%d\n", (int) mul_i1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) mul_i1(0, 1));
  // RESULT: 0
  printf("%d\n", (int) mul_i1(1, 0));
  // RESULT: 0
  printf("%d\n", (int) mul_i1(1, 1));
  // RESULT: 1

  // ===== u1 (mod 2) =====
  printf("%d\n", (int) mul_u1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) mul_u1(0, 1));
  // RESULT: 0
  printf("%d\n", (int) mul_u1(1, 0));
  // RESULT: 0
  printf("%d\n", (int) mul_u1(1, 1));
  // RESULT: 1

  // ===== i8 =====
  printf("%d\n", (int) mul_i8(0, 0));
  // RESULT: 0
  printf("%d\n", (int) mul_i8(127, 2));
  // RESULT: -2
  printf("%d\n", (int) mul_i8(-128, 2));
  // RESULT: 0
  printf("%d\n", (int) mul_i8(-128, -1));
  // RESULT: -128
  printf("%d\n", (int) mul_i8(100, 3));
  // RESULT: 44
  printf("%d\n", (int) mul_i8(-100, 3));
  // RESULT: -44
  printf("%d\n", (int) mul_i8(50, 5));
  // RESULT: -6
  printf("%d\n", (int) mul_i8(127, 127));
  // RESULT: 1
  printf("%d\n", (int) mul_i8(-127, -127));
  // RESULT: 1
  printf("%d\n", (int) mul_i8(-127, 2));
  // RESULT: 2

  // ===== u8 =====
  printf("%u\n", (unsigned) mul_u8(255u, 255u));
  // RESULT: 1
  printf("%u\n", (unsigned) mul_u8(255u, 2u));
  // RESULT: 254
  printf("%u\n", (unsigned) mul_u8(0u, 255u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u8(200u, 200u));
  // RESULT: 64
  printf("%u\n", (unsigned) mul_u8(128u, 2u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u8(128u, 3u));
  // RESULT: 128
  printf("%u\n", (unsigned) mul_u8(250u, 10u));
  // RESULT: 196
  printf("%u\n", (unsigned) mul_u8(13u, 20u));
  // RESULT: 4
  printf("%u\n", (unsigned) mul_u8(1u, 255u));
  // RESULT: 255
  printf("%u\n", (unsigned) mul_u8(123u, 0u));
  // RESULT: 0

  // ===== i16 =====
  printf("%d\n", (int) mul_i16(32767, 2));
  // RESULT: -2
  printf("%d\n", (int) mul_i16(-32768, 2));
  // RESULT: 0
  printf("%d\n", (int) mul_i16(-32768, -1));
  // RESULT: -32768
  printf("%d\n", (int) mul_i16(30000, 3));
  // RESULT: 24464
  printf("%d\n", (int) mul_i16(-30000, 3));
  // RESULT: -24464
  printf("%d\n", (int) mul_i16(20000, 4));
  // RESULT: 14464
  printf("%d\n", (int) mul_i16(-20000, 4));
  // RESULT: -14464
  printf("%d\n", (int) mul_i16(32767, 32767));
  // RESULT: 1
  printf("%d\n", (int) mul_i16(-32768, -32768));
  // RESULT: 0
  printf("%d\n", (int) mul_i16(-1, -1));
  // RESULT: 1

  // ===== u16 =====
  printf("%u\n", (unsigned) mul_u16(65535u, 65535u));
  // RESULT: 1
  printf("%u\n", (unsigned) mul_u16(65535u, 2u));
  // RESULT: 65534
  printf("%u\n", (unsigned) mul_u16(50000u, 2u));
  // RESULT: 34464
  printf("%u\n", (unsigned) mul_u16(32768u, 2u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u16(32768u, 3u));
  // RESULT: 32768
  printf("%u\n", (unsigned) mul_u16(1000u, 65535u));
  // RESULT: 64536
  printf("%u\n", (unsigned) mul_u16(0u, 65535u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u16(12345u, 54321u));
  // RESULT: 28393
  printf("%u\n", (unsigned) mul_u16(2u, 65534u));
  // RESULT: 65532
  printf("%u\n", (unsigned) mul_u16(1u, 65535u));
  // RESULT: 65535

  // ===== i32 =====
  printf("%d\n", (int) mul_i32(2147483647, 2));
  // RESULT: -2
  printf("%d\n", (int) mul_i32(-2147483648, 2));
  // RESULT: 0
  printf("%d\n", (int) mul_i32(-2147483648, -1));
  // RESULT: -2147483648
  printf("%d\n", (int) mul_i32(2000000000, 3));
  // RESULT: 1705032704
  printf("%d\n", (int) mul_i32(-2000000000, 3));
  // RESULT: -1705032704
  printf("%d\n", (int) mul_i32(100000, 100000));
  // RESULT: 1410065408
  printf("%d\n", (int) mul_i32(0x40000000, 2));
  // RESULT: -2147483648
  printf("%d\n", (int) mul_i32(-1, -1));
  // RESULT: 1
  printf("%d\n", (int) mul_i32(123456789, -123456789));
  // RESULT: 1757895751
  printf("%d\n", (int) mul_i32((int32_t)0x80000000u, 2));
  // RESULT: 0

  // ===== u32 =====
  printf("%u\n", (unsigned) mul_u32(0xFFFFFFFFu, 0xFFFFFFFFu));
  // RESULT: 1
  printf("%u\n", (unsigned) mul_u32(0xFFFFFFFFu, 2u));
  // RESULT: 4294967294
  printf("%u\n", (unsigned) mul_u32(4000000000u, 2u));
  // RESULT: 3705032704
  printf("%u\n", (unsigned) mul_u32(3000000000u, 3u));
  // RESULT: 410065408
  printf("%u\n", (unsigned) mul_u32(2147483648u, 2u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u32(2147483648u, 3u));
  // RESULT: 2147483648
  printf("%u\n", (unsigned) mul_u32(1234567890u, 1000u));
  // RESULT: 1912276048
  printf("%u\n", (unsigned) mul_u32(0u, 4294967295u));
  // RESULT: 0
  printf("%u\n", (unsigned) mul_u32(579u, 1u));
  // RESULT: 579
  printf("%u\n", (unsigned) mul_u32(1u, 4294967295u));
  // RESULT: 4294967295

  // ===== i64 =====
  printf("%lld\n", (long long) mul_i64(9223372036854775807ll, 2ll));
  // RESULT: -2
  printf("%lld\n", (long long) mul_i64(-9223372036854775808ll, 2ll));
  // RESULT: 0
  printf("%lld\n", (long long) mul_i64(-9223372036854775808ll, -1ll));
  // RESULT: -9223372036854775808
  printf("%lld\n", (long long) mul_i64(9000000000000000000ll, 2ll));
  // RESULT: -446744073709551616
  printf("%lld\n", (long long) mul_i64(-9000000000000000000ll, 2ll));
  // RESULT: 446744073709551616
  printf("%lld\n", (long long) mul_i64(-1ll, -1ll));
  // RESULT: 1
  printf("%lld\n", (long long) mul_i64(0x4000000000000000ll, 2ll));
  // RESULT: -9223372036854775808
  printf("%lld\n", (long long) mul_i64(-9223372036854775807ll, 2ll));
  // RESULT: 2
  printf("%lld\n", (long long) mul_i64(1234567890123456789ll, 10ll));
  // RESULT: -6101065172474983726
  printf("%lld\n", (long long) mul_i64(-9223372036854775808ll, 0ll));
  // RESULT: 0

  // ===== u64 =====
  printf("%llu\n", (unsigned long long) mul_u64(0xFFFFFFFFFFFFFFFFull, 2ull));
  // RESULT: 18446744073709551614
  printf("%llu\n", (unsigned long long) mul_u64(0xFFFFFFFFFFFFFFFFull, 0xFFFFFFFFFFFFFFFFull));
  // RESULT: 1
  printf("%llu\n", (unsigned long long) mul_u64(18000000000000000000ull, 2ull));
  // RESULT: 17553255926290448384
  printf("%llu\n", (unsigned long long) mul_u64(9223372036854775808ull, 2ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) mul_u64(9223372036854775808ull, 3ull));
  // RESULT: 9223372036854775808
  printf("%llu\n", (unsigned long long) mul_u64(12345678901234567890ull, 10ull));
  // RESULT: 12776324570088369204
  printf("%llu\n", (unsigned long long) mul_u64(0ull, 18446744073709551615ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) mul_u64(579ull, 1ull));
  // RESULT: 579
  printf("%llu\n", (unsigned long long) mul_u64(1ull, 18446744073709551615ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) mul_u64(0xFFFFFFFFFFFFFFFFull, 0ull));
  // RESULT: 0

  return 0;
}

