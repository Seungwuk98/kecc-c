// RUN: kecc-test-executor %s -dump-source=0 | kecc-translate | FileCheck %s

fun i1 @add_i1 (i1, i1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i1
  %b0:p1:i1
  %b0:i0:i1 = add %b0:p0:i1 %b0:p1:i1
  ret %b0:i0:i1
}
// CHECK:  .globl	add_i1
// CHECK-NEXT:  .align	1
// CHECK-NEXT:  .type	add_i1, @function
// CHECK-NEXT: add_i1:

// CHECK-LABEL: .add_i1_L0:
// CHECK-NEXT:  add	a0,a0,a1
// CHECK-NEXT:  andi	a0,a0,1
// CHECK-NEXT:  ret


fun i8 @add_i8 (i8, i8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i8
  %b0:p1:i8
  %b0:i0:i8 = add %b0:p0:i8 %b0:p1:i8
  ret %b0:i0:i8
}
// CHECK:   .globl	add_i8
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_i8, @function
// CHECK-NEXT: add_i8:

// CHECK-LABEL: .add_i8_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,56
// CHECK-NEXT:   srai	a0,a0,56
// CHECK-NEXT:   ret

fun i16 @add_i16 (i16, i16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i16
  %b0:p1:i16
  %b0:i0:i16 = add %b0:p0:i16 %b0:p1:i16
  ret %b0:i0:i16
}
// CHECK:   .globl	add_i16
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_i16, @function
// CHECK-NEXT: add_i16:

// CHECK-LABEL: .add_i16_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,48
// CHECK-NEXT:   srai	a0,a0,48
// CHECK-NEXT:   ret


fun i32 @add_i32 (i32, i32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i32
  %b0:p1:i32
  %b0:i0:i32 = add %b0:p0:i32 %b0:p1:i32
  ret %b0:i0:i32
}

// CHECK:   .globl	add_i32
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_i32, @function
// CHECK-NEXT: add_i32:

// CHECK-LABEL: .add_i32_L0:
// CHECK-NEXT:   addw	a0,a0,a1
// CHECK-NEXT:   ret


fun i64 @add_i64 (i64, i64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i64
  %b0:p1:i64
  %b0:i0:i64 = add %b0:p0:i64 %b0:p1:i64
  ret %b0:i0:i64
}
// CHECK:   .globl	add_i64
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_i64, @function
// CHECK-NEXT: add_i64:

// CHECK-LABEL: .add_i64_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   ret


fun u1 @add_u1 (u1, u1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u1
  %b0:p1:u1
  %b0:i0:u1 = add %b0:p0:u1 %b0:p1:u1
  ret %b0:i0:u1
}

// CHECK:   .globl	add_u1
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_u1, @function
// CHECK-NEXT: add_u1:

// CHECK-LABEL: .add_u1_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   andi	a0,a0,1
// CHECK-NEXT:   ret


fun u8 @add_u8 (u8, u8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u8
  %b0:p1:u8
  %b0:i0:u8 = add %b0:p0:u8 %b0:p1:u8
  ret %b0:i0:u8
}

// CHECK:   .globl	add_u8
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_u8, @function
// CHECK-NEXT: add_u8:

// CHECK-LABEL: .add_u8_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   andi	a0,a0,255
// CHECK-NEXT:   ret

fun u16 @add_u16 (u16, u16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u16
  %b0:p1:u16
  %b0:i0:u16 = add %b0:p0:u16 %b0:p1:u16
  ret %b0:i0:u16
}

// CHECK:   .globl	add_u16
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_u16, @function
// CHECK-NEXT: add_u16:

// CHECK-LABEL: .add_u16_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,48
// CHECK-NEXT:   srli	a0,a0,48
// CHECK-NEXT:   ret


fun u32 @add_u32 (u32, u32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u32
  %b0:p1:u32
  %b0:i0:u32 = add %b0:p0:u32 %b0:p1:u32
  ret %b0:i0:u32
}

// CHECK:   .globl	add_u32
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_u32, @function
// CHECK-NEXT: add_u32:

// CHECK-LABEL: .add_u32_L0:
// CHECK-NEXT:   addw	a0,a0,a1
// CHECK-NEXT:   ret

fun u64 @add_u64 (u64, u64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u64
  %b0:p1:u64
  %b0:i0:u64 = add %b0:p0:u64 %b0:p1:u64
  ret %b0:i0:u64
}

// CHECK:   .globl	add_u64
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	add_u64, @function
// CHECK-NEXT: add_u64:

// CHECK-LABEL: .add_u64_L0:
// CHECK-NEXT:   add	a0,a0,a1
// CHECK-NEXT:   ret


/////// main.c

// RUN: kecc-test-executor %s | FileCheck %s --check-prefix=RESULT
#include <stdio.h>
#include <stdint.h>

#include <stdio.h>
#include <stdint.h>

extern _Bool   add_i1(_Bool, _Bool);
extern int8_t  add_i8(int8_t, int8_t);
extern int16_t add_i16(int16_t, int16_t);
extern int32_t add_i32(int32_t, int32_t);
extern int64_t add_i64(int64_t, int64_t);

extern _Bool    add_u1(_Bool, _Bool);
extern uint8_t  add_u8(uint8_t, uint8_t);
extern uint16_t add_u16(uint16_t, uint16_t);
extern uint32_t add_u32(uint32_t, uint32_t);
extern uint64_t add_u64(uint64_t, uint64_t);

int main(void) {
  // ===== i1 (mod 2) =====
  printf("%d\n", (int) add_i1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) add_i1(0, 1));
  // RESULT: 1
  printf("%d\n", (int) add_i1(1, 0));
  // RESULT: 1
  printf("%d\n", (int) add_i1(1, 1));
  // RESULT: 0

  // ===== u1 (mod 2) =====
  printf("%d\n", (int) add_u1(0, 0));
  // RESULT: 0
  printf("%d\n", (int) add_u1(0, 1));
  // RESULT: 1
  printf("%d\n", (int) add_u1(1, 0));
  // RESULT: 1
  printf("%d\n", (int) add_u1(1, 1));
  // RESULT: 0

  // ===== i8 =====
  printf("%d\n", (int) add_i8(0, 0));
  // RESULT: 0
  printf("%d\n", (int) add_i8(127, 1));
  // RESULT: -128
  printf("%d\n", (int) add_i8(-128, -1));
  // RESULT: 127
  printf("%d\n", (int) add_i8(-1, 1));
  // RESULT: 0
  printf("%d\n", (int) add_i8(-128, -128));
  // RESULT: 0
  printf("%d\n", (int) add_i8(100, 27));
  // RESULT: 127
  printf("%d\n", (int) add_i8(120, 10));
  // RESULT: -126
  printf("%d\n", (int) add_i8(-50, -60));
  // RESULT: -110
  printf("%d\n", (int) add_i8(127, 127));
  // RESULT: -2
  printf("%d\n", (int) add_i8(-127, 1));
  // RESULT: -126

  // ===== u8 =====
  printf("%u\n", (unsigned) add_u8(0u, 0u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u8(255u, 1u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u8(255u, 255u));
  // RESULT: 254
  printf("%u\n", (unsigned) add_u8(1u, 255u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u8(200u, 55u));
  // RESULT: 255
  printf("%u\n", (unsigned) add_u8(250u, 10u));
  // RESULT: 4
  printf("%u\n", (unsigned) add_u8(128u, 128u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u8(127u, 129u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u8(1u, 2u));
  // RESULT: 3
  printf("%u\n", (unsigned) add_u8(0u, 255u));
  // RESULT: 255

  // ===== i16 =====
  printf("%d\n", (int) add_i16(32767, 1));
  // RESULT: -32768
  printf("%d\n", (int) add_i16(-32768, -1));
  // RESULT: 32767
  printf("%d\n", (int) add_i16(-1, 1));
  // RESULT: 0
  printf("%d\n", (int) add_i16(-32768, -32768));
  // RESULT: 0
  printf("%d\n", (int) add_i16(30000, 10000));
  // RESULT: -25536
  printf("%d\n", (int) add_i16(-30000, -10000));
  // RESULT: 25536
  printf("%d\n", (int) add_i16(32767, 32767));
  // RESULT: -2
  printf("%d\n", (int) add_i16(-32768, 32767));
  // RESULT: -1
  printf("%d\n", (int) add_i16(12345, -12345));
  // RESULT: 0

  // ===== u16 =====
  printf("%u\n", (unsigned) add_u16(0u, 0u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u16(65535u, 1u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u16(65535u, 65535u));
  // RESULT: 65534
  printf("%u\n", (unsigned) add_u16(50000u, 20000u));
  // RESULT: 4464
  printf("%u\n", (unsigned) add_u16(32768u, 32768u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u16(1u, 65535u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u16(1000u, 65535u));
  // RESULT: 999
  printf("%u\n", (unsigned) add_u16(0u, 65535u));
  // RESULT: 65535
  printf("%u\n", (unsigned) add_u16(2u, 65534u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u16(12345u, 54321u));
  // RESULT: 1130

  // ===== i32 =====
  printf("%d\n", (int) add_i32(2147483647, 1));
  // RESULT: -2147483648
  printf("%d\n", (int) add_i32(-2147483648, -1));
  // RESULT: 2147483647
  printf("%d\n", (int) add_i32(-1, 1));
  // RESULT: 0
  printf("%d\n", (int) add_i32(2000000000, 1000000000));
  // RESULT: -1294967296
  printf("%d\n", (int) add_i32(-2147483648, -2147483648));
  // RESULT: 0
  printf("%d\n", (int) add_i32(2147483647, 2147483647));
  // RESULT: -2
  printf("%d\n", (int) add_i32(-2000000000, -2000000000));
  // RESULT: 294967296
  printf("%d\n", (int) add_i32(-2147483648, 2147483647));
  // RESULT: -1
  printf("%d\n", (int) add_i32(123456789, -123456789));
  // RESULT: 0
  printf("%d\n", (int) add_i32(0x40000000, 0x40000000));
  // RESULT: -2147483648

  // ===== u32 =====
  printf("%u\n", (unsigned) add_u32(0u, 0u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u32(4294967295u, 1u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u32(4294967295u, 4294967295u));
  // RESULT: 4294967294
  printf("%u\n", (unsigned) add_u32(4000000000u, 1000000000u));
  // RESULT: 705032704
  printf("%u\n", (unsigned) add_u32(2147483648u, 2147483648u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u32(1u, 4294967295u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u32(2u, 4294967294u));
  // RESULT: 0
  printf("%u\n", (unsigned) add_u32(1234567890u, 3000000000u));
  // RESULT: 4234567890
  printf("%u\n", (unsigned) add_u32(0u, 4294967295u));
  // RESULT: 4294967295
  printf("%u\n", (unsigned) add_u32(123u, 456u));
  // RESULT: 579

  // ===== i64 =====
  printf("%lld\n", (long long) add_i64(9223372036854775807ll, 1ll));
  // RESULT: -9223372036854775808
  printf("%lld\n", (long long) add_i64(-9223372036854775808ll, -1ll));
  // RESULT: 9223372036854775807
  printf("%lld\n", (long long) add_i64(-1ll, 1ll));
  // RESULT: 0
  printf("%lld\n", (long long) add_i64(9000000000000000000ll, 1000000000000000000ll));
  // RESULT: -8446744073709551616
  printf("%lld\n", (long long) add_i64(-9223372036854775808ll, -9223372036854775808ll));
  // RESULT: 0
  printf("%lld\n", (long long) add_i64(9223372036854775807ll, 9223372036854775807ll));
  // RESULT: -2
  printf("%lld\n", (long long) add_i64(-9223372036854775808ll, 9223372036854775807ll));
  // RESULT: -1
  printf("%lld\n", (long long) add_i64(1234567890123456789ll, -1234567890123456789ll));
  // RESULT: 0
  printf("%lld\n", (long long) add_i64(-9223372036854775807ll, -1ll));
  // RESULT: -9223372036854775808

  // ===== u64 =====
  printf("%llu\n", (unsigned long long) add_u64(0ull, 0ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) add_u64(18446744073709551615ull, 1ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) add_u64(18446744073709551615ull, 18446744073709551615ull));
  // RESULT: 18446744073709551614
  printf("%llu\n", (unsigned long long) add_u64(18000000000000000000ull, 10000000000000000000ull));
  // RESULT: 9553255926290448384
  printf("%llu\n", (unsigned long long) add_u64(9223372036854775808ull, 9223372036854775808ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) add_u64(1ull, 18446744073709551615ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) add_u64(2ull, 18446744073709551614ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) add_u64(12345678901234567890ull, 10000000000000000000ull));
  // RESULT: 3898934827525016274
  printf("%llu\n", (unsigned long long) add_u64(0ull, 18446744073709551615ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) add_u64(123ull, 456ull));
  // RESULT: 579

  return 0;
}


