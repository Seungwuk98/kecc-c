// RUN: kecc-test-executor %s --dump-source=0 | kecc-translate | FileCheck %s 

fun i1 @div_i1 (i1, i1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i1
  %b0:p1:i1
  %b0:i0:i1 = div %b0:p0:i1 %b0:p1:i1
  ret %b0:i0:i1
}

// CHECK:   .globl	div_i1
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_i1, @function
// CHECK-NEXT: div_i1:

// CHECK-LABEL: .div_i1_L0:
// CHECK-NEXT:   div	a0,a0,a1
// CHECK-NEXT:   andi	a0,a0,1
// CHECK-NEXT:   ret


fun i8 @div_i8 (i8, i8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i8
  %b0:p1:i8
  %b0:i0:i8 = div %b0:p0:i8 %b0:p1:i8
  ret %b0:i0:i8
}

// CHECK:   .globl	div_i8
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_i8, @function
// CHECK-NEXT: div_i8:

// CHECK-LABEL: .div_i8_L0:
// CHECK-NEXT:   div	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,56
// CHECK-NEXT:   srai	a0,a0,56
// CHECK-NEXT:   ret


fun i16 @div_i16 (i16, i16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i16
  %b0:p1:i16
  %b0:i0:i16 = div %b0:p0:i16 %b0:p1:i16
  ret %b0:i0:i16
}

// CHECK:   .globl	div_i16
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_i16, @function
// CHECK-NEXT: div_i16:

// CHECK-LABEL: .div_i16_L0:
// CHECK-NEXT:   div	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,48
// CHECK-NEXT:   srai	a0,a0,48
// CHECK-NEXT:   ret


fun i32 @div_i32 (i32, i32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i32
  %b0:p1:i32
  %b0:i0:i32 = div %b0:p0:i32 %b0:p1:i32
  ret %b0:i0:i32
}

// CHECK:   .globl	div_i32
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_i32, @function
// CHECK-NEXT: div_i32:

// CHECK-LABEL: .div_i32_L0:
// CHECK-NEXT:   divw	a0,a0,a1
// CHECK-NEXT:   ret


fun i64 @div_i64 (i64, i64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:i64
  %b0:p1:i64
  %b0:i0:i64 = div %b0:p0:i64 %b0:p1:i64
  ret %b0:i0:i64
}

// CHECK:   .globl	div_i64
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_i64, @function
// CHECK-NEXT: div_i64:

// CHECK-LABEL: .div_i64_L0:
// CHECK-NEXT:   div	a0,a0,a1
// CHECK-NEXT:   ret


fun u1 @div_u1 (u1, u1) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u1
  %b0:p1:u1
  %b0:i0:u1 = div %b0:p0:u1 %b0:p1:u1
  ret %b0:i0:u1
}

// CHECK:   .globl	div_u1
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_u1, @function
// CHECK-NEXT: div_u1:

// CHECK-LABEL: .div_u1_L0:
// CHECK-NEXT:   divu	a0,a0,a1
// CHECK-NEXT:   andi	a0,a0,1
// CHECK-NEXT:   ret


fun u8 @div_u8 (u8, u8) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u8
  %b0:p1:u8
  %b0:i0:u8 = div %b0:p0:u8 %b0:p1:u8
  ret %b0:i0:u8
}

// CHECK:   .globl	div_u8
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_u8, @function
// CHECK-NEXT: div_u8:

// CHECK-LABEL: .div_u8_L0:
// CHECK-NEXT:   divu	a0,a0,a1
// CHECK-NEXT:   andi	a0,a0,255
// CHECK-NEXT:   ret


fun u16 @div_u16 (u16, u16) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u16
  %b0:p1:u16
  %b0:i0:u16 = div %b0:p0:u16 %b0:p1:u16
  ret %b0:i0:u16
}

// CHECK:   .globl	div_u16
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_u16, @function
// CHECK-NEXT: div_u16:

// CHECK-LABEL: .div_u16_L0:
// CHECK-NEXT:   divu	a0,a0,a1
// CHECK-NEXT:   slli	a0,a0,48
// CHECK-NEXT:   srli	a0,a0,48
// CHECK-NEXT:   ret


fun u32 @div_u32 (u32, u32) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u32
  %b0:p1:u32
  %b0:i0:u32 = div %b0:p0:u32 %b0:p1:u32
  ret %b0:i0:u32
}

// CHECK:   .globl	div_u32
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_u32, @function
// CHECK-NEXT: div_u32:

// CHECK-LABEL: .div_u32_L0:
// CHECK-NEXT:   divuw	a0,a0,a1
// CHECK-NEXT:   ret

fun u64 @div_u64 (u64, u64) {
init:
  bid: b0
  allocations:

block b0:
  %b0:p0:u64
  %b0:p1:u64
  %b0:i0:u64 = div %b0:p0:u64 %b0:p1:u64
  ret %b0:i0:u64
}

// CHECK:   .globl	div_u64
// CHECK-NEXT:   .align	1
// CHECK-NEXT:   .type	div_u64, @function
// CHECK-NEXT: div_u64:

// CHECK-LABEL: .div_u64_L0:
// CHECK-NEXT:   divu	a0,a0,a1
// CHECK-NEXT:   ret



////// main.c 

// RUN: kecc-test-executor %s | FileCheck %s --check-prefix=RESULT
#include <stdio.h>
#include <stdint.h>

extern _Bool   div_i1(_Bool, _Bool);
extern int8_t  div_i8(int8_t, int8_t);
extern int16_t div_i16(int16_t, int16_t);
extern int32_t div_i32(int32_t, int32_t);
extern int64_t div_i64(int64_t, int64_t);

extern _Bool    div_u1(_Bool, _Bool);
extern uint8_t  div_u8(uint8_t, uint8_t);
extern uint16_t div_u16(uint16_t, uint16_t);
extern uint32_t div_u32(uint32_t, uint32_t);
extern uint64_t div_u64(uint64_t, uint64_t);

int main(void) {
  // ===== i1 (valid only when divisor == 1) =====
  printf("%d\n", (int) div_i1(0, 1));
  // RESULT: 0
  printf("%d\n", (int) div_i1(1, 1));
  // RESULT: 1

  // ===== u1 =====
  printf("%d\n", (int) div_u1(0, 1));
  // RESULT: 0
  printf("%d\n", (int) div_u1(1, 1));
  // RESULT: 1

  // ===== i8 =====
  printf("%d\n", (int) div_i8(0, 1));
  // RESULT: 0
  printf("%d\n", (int) div_i8(127, 1));
  // RESULT: 127
  printf("%d\n", (int) div_i8(-128, 1));
  // RESULT: -128
  printf("%d\n", (int) div_i8(-128, 2));
  // RESULT: -64
  printf("%d\n", (int) div_i8(127, 2));
  // RESULT: 63
  printf("%d\n", (int) div_i8(-127, 2));
  // RESULT: -63
  printf("%d\n", (int) div_i8(100, 3));
  // RESULT: 33
  printf("%d\n", (int) div_i8(-100, 3));
  // RESULT: -33
  printf("%d\n", (int) div_i8(-100, -3));
  // RESULT: 33
  printf("%d\n", (int) div_i8(1, 127));
  // RESULT: 0
  printf("%d\n", (int) div_i8(-1, 127));
  // RESULT: 0
  printf("%d\n", (int) div_i8(-1, -128));
  // RESULT: 0

  // ===== u8 =====
  printf("%u\n", (unsigned) div_u8(255u, 1u));
  // RESULT: 255
  printf("%u\n", (unsigned) div_u8(255u, 2u));
  // RESULT: 127
  printf("%u\n", (unsigned) div_u8(200u, 3u));
  // RESULT: 66
  printf("%u\n", (unsigned) div_u8(1u, 255u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u8(0u, 255u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u8(255u, 255u));
  // RESULT: 1
  printf("%u\n", (unsigned) div_u8(128u, 2u));
  // RESULT: 64
  printf("%u\n", (unsigned) div_u8(128u, 3u));
  // RESULT: 42
  printf("%u\n", (unsigned) div_u8(250u, 10u));
  // RESULT: 25
  printf("%u\n", (unsigned) div_u8(250u, 251u));
  // RESULT: 0

  // ===== i16 =====
  printf("%d\n", (int) div_i16(32767, 1));
  // RESULT: 32767
  printf("%d\n", (int) div_i16(-32768, 1));
  // RESULT: -32768
  printf("%d\n", (int) div_i16(-32768, 2));
  // RESULT: -16384
  printf("%d\n", (int) div_i16(32767, 2));
  // RESULT: 16383
  printf("%d\n", (int) div_i16(-32767, 2));
  // RESULT: -16383
  printf("%d\n", (int) div_i16(30000, 10000));
  // RESULT: 3
  printf("%d\n", (int) div_i16(-30000, 10000));
  // RESULT: -3
  printf("%d\n", (int) div_i16(30000, -10000));
  // RESULT: -3
  printf("%d\n", (int) div_i16(-30000, -10000));
  // RESULT: 3
  printf("%d\n", (int) div_i16(1, 32767));
  // RESULT: 0
  printf("%d\n", (int) div_i16(-1, 32767));
  // RESULT: 0
  printf("%d\n", (int) div_i16(-1, -32768));
  // RESULT: 0

  // ===== u16 =====
  printf("%u\n", (unsigned) div_u16(65535u, 1u));
  // RESULT: 65535
  printf("%u\n", (unsigned) div_u16(65535u, 2u));
  // RESULT: 32767
  printf("%u\n", (unsigned) div_u16(50000u, 20000u));
  // RESULT: 2
  printf("%u\n", (unsigned) div_u16(50000u, 65535u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u16(1u, 65535u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u16(65535u, 65535u));
  // RESULT: 1
  printf("%u\n", (unsigned) div_u16(32768u, 3u));
  // RESULT: 10922
  printf("%u\n", (unsigned) div_u16(65535u, 3u));
  // RESULT: 21845
  printf("%u\n", (unsigned) div_u16(0u, 65535u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u16(2u, 65534u));
  // RESULT: 0

  // ===== i32 =====
  printf("%d\n", (int) div_i32(2147483647, 1));
  // RESULT: 2147483647
  printf("%d\n", (int) div_i32(-2147483648, 1));
  // RESULT: -2147483648
  printf("%d\n", (int) div_i32(-2147483648, 2));
  // RESULT: -1073741824
  printf("%d\n", (int) div_i32(2147483647, 2));
  // RESULT: 1073741823
  printf("%d\n", (int) div_i32(-2147483647, 2));
  // RESULT: -1073741823
  printf("%d\n", (int) div_i32(2000000000, 3));
  // RESULT: 666666666
  printf("%d\n", (int) div_i32(-2000000000, 3));
  // RESULT: -666666666
  printf("%d\n", (int) div_i32(1, 2147483647));
  // RESULT: 0
  printf("%d\n", (int) div_i32(0, -2147483648));
  // RESULT: 0
  printf("%d\n", (int) div_i32(0x40000000, 2));
  // RESULT: 536870912
  printf("%d\n", (int) div_i32(30, -2));
  // RESULT: -15

  // ===== u32 =====
  printf("%u\n", (unsigned) div_u32(4294967295u, 1u));
  // RESULT: 4294967295
  printf("%u\n", (unsigned) div_u32(4294967295u, 2u));
  // RESULT: 2147483647
  printf("%u\n", (unsigned) div_u32(4000000000u, 3u));
  // RESULT: 1333333333
  printf("%u\n", (unsigned) div_u32(1u, 4294967295u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u32(0u, 4294967295u));
  // RESULT: 0
  printf("%u\n", (unsigned) div_u32(4294967295u, 4294967295u));
  // RESULT: 1
  printf("%u\n", (unsigned) div_u32(2147483648u, 3u));
  // RESULT: 715827882
  printf("%u\n", (unsigned) div_u32(2147483648u, 2147483648u));
  // RESULT: 1
  printf("%u\n", (unsigned) div_u32(3000000000u, 1000000000u));
  // RESULT: 3
  printf("%u\n", (unsigned) div_u32(1234567890u, 1000u));
  // RESULT: 1234567
  printf("%u\n", (unsigned) div_u32(30, -2));
  // RESULT: 0

  // ===== i64 =====
  printf("%lld\n", (long long) div_i64(9223372036854775807ll, 1ll));
  // RESULT: 9223372036854775807
  printf("%lld\n", (long long) div_i64(-9223372036854775808ll, 1ll));
  // RESULT: -9223372036854775808
  printf("%lld\n", (long long) div_i64(-9223372036854775808ll, 2ll));
  // RESULT: -4611686018427387904
  printf("%lld\n", (long long) div_i64(9223372036854775807ll, 2ll));
  // RESULT: 4611686018427387903
  printf("%lld\n", (long long) div_i64(-9223372036854775807ll, 2ll));
  // RESULT: -4611686018427387903
  printf("%lld\n", (long long) div_i64(9000000000000000000ll, 3ll));
  // RESULT: 3000000000000000000
  printf("%lld\n", (long long) div_i64(-9000000000000000000ll, 3ll));
  // RESULT: -3000000000000000000
  printf("%lld\n", (long long) div_i64(1ll, 9223372036854775807ll));
  // RESULT: 0
  printf("%lld\n", (long long) div_i64(0ll, -9223372036854775807ll));
  // RESULT: 0
  printf("%lld\n", (long long) div_i64(0x4000000000000000ll, 2ll));
  // RESULT: 2305843009213693952

  // ===== u64 =====
  printf("%llu\n", (unsigned long long) div_u64(18446744073709551615ull, 1ull));
  // RESULT: 18446744073709551615
  printf("%llu\n", (unsigned long long) div_u64(18446744073709551615ull, 2ull));
  // RESULT: 9223372036854775807
  printf("%llu\n", (unsigned long long) div_u64(18000000000000000000ull, 3ull));
  // RESULT: 6000000000000000000
  printf("%llu\n", (unsigned long long) div_u64(1ull, 18446744073709551615ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) div_u64(0ull, 18446744073709551615ull));
  // RESULT: 0
  printf("%llu\n", (unsigned long long) div_u64(18446744073709551615ull, 18446744073709551615ull));
  // RESULT: 1
  printf("%llu\n", (unsigned long long) div_u64(9223372036854775808ull, 3ull));
  // RESULT: 3074457345618258602
  printf("%llu\n", (unsigned long long) div_u64(9223372036854775808ull, 9223372036854775808ull));
  // RESULT: 1
  printf("%llu\n", (unsigned long long) div_u64(12345678901234567890ull, 10ull));
  // RESULT: 1234567890123456789

  return 0;
}

