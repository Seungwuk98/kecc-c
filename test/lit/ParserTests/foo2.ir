// RUN: kecc-opt %s -action=parse | FileCheck %s

fun i32 @main () {
init:
  bid: b0
  allocations: 
    %l0:i32:i
    %l1:i32:i
    %l2:i32:i
    %l3:i32:k

block b0:
  %b0:i0:unit = store 0:i32 %l0:i32*
  j b1()

block b1:
  %b1:i0:unit = store 0:i32 %l1:i32*
  j b2()

block b2:
  %b2:i0:i32 = load %l1:i32*
  %b2:i1:u1 = cmp lt %b2:i0:i32 10:i32
  br %b2:i1:u1, b3(), b5()

block b3:
  %b3:i0:unit = store 0:i32 %l2:i32*
  %b3:i1:unit = store 0:i32 %l3:i32*
  j b4()

block b4:
  %b4:i0:i32 = load %l1:i32*
  %b4:i1:i32 = add %b4:i0:i32 1:i32
  %b4:i2:unit = store %b4:i1:i32 %l1:i32*
  j b2()

block b5:
  ret 1:i32

block b6:
  ret 0:i32
}


// CHECK: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT: bid: b0
// CHECK-NEXT: allocations:
// CHECK-NEXT: %l0:i32:i
// CHECK-NEXT: %l1:i32:i
// CHECK-NEXT: %l2:i32:i
// CHECK-NEXT: %l3:i32:k

// CHECK-LABEL: block b0:
// CHECK-NEXT: %b0:i0:unit = store 0:i32 %l0:i32*
// CHECK-NEXT: j b1()

// CHECK-LABEL: block b1:
// CHECK-NEXT: %b1:i0:unit = store 0:i32 %l1:i32*
// CHECK-NEXT: j b2()

// CHECK-LABEL: block b2:
// CHECK-NEXT: %b2:i0:i32 = load %l1:i32*
// CHECK-NEXT: %b2:i1:u1 = cmp lt %b2:i0:i32 10:i32
// CHECK-NEXT: br %b2:i1:u1, b3(), b5()

// CHECK-LABEL: block b3:
// CHECK-NEXT: %b3:i0:unit = store 0:i32 %l2:i32*
// CHECK-NEXT: %b3:i1:unit = store 0:i32 %l3:i32*
// CHECK-NEXT: j b4()

// CHECK-LABEL: block b4:
// CHECK-NEXT: %b4:i0:i32 = load %l1:i32*
// CHECK-NEXT: %b4:i1:i32 = add %b4:i0:i32 1:i32
// CHECK-NEXT: %b4:i2:unit = store %b4:i1:i32 %l1:i32*
// CHECK-NEXT: j b2()

// CHECK-LABEL: block b5:
// CHECK-NEXT: ret 1:i32

// CHECK-LABEL: block b6:
// CHECK-NEXT: ret 0:i32
// CHECK-NEXT: }

