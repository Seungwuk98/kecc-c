// RUN: kecc-opt %s -action=parse | FileCheck %s

fun i32 @fibonacci (i32) {
init:
  bid: b0
  allocations: 
    %l0:i32:n
    %l1:i32:i
    %l2:i32:t1
    %l3:i32:t2
    %l4:i32:next_term

block b0:
  %b0:p0:i32:n
  %b0:i0:unit = store %b0:p0:i32 %l0:i32*
  %b0:i1:unit = store 0:i32 %l1:i32*
  %b0:i2:unit = store 0:i32 %l2:i32*
  %b0:i3:unit = store 1:i32 %l3:i32*
  %b0:i4:unit = store 0:i32 %l4:i32*
  %b0:i5:i32 = load %l0:i32*
  %b0:i6:u1 = cmp lt %b0:i5:i32 2:i32
  br %b0:i6:u1, b1(), b2()

block b1:
  %b1:i0:i32 = load %l0:i32*
  ret %b1:i0:i32

block b2:
  j b3()

block b3:
  j b5()

block b4:
  j b3()

block b5:
  %b5:i0:unit = store 1:i32 %l1:i32*
  j b6()

block b6:
  %b6:i0:i32 = load %l1:i32*
  %b6:i1:i32 = load %l0:i32*
  %b6:i2:u1 = cmp lt %b6:i0:i32 %b6:i1:i32
  br %b6:i2:u1, b7(), b9()

block b7:
  %b7:i0:i32 = load %l2:i32*
  %b7:i1:i32 = load %l3:i32*
  %b7:i2:i32 = add %b7:i0:i32 %b7:i1:i32
  %b7:i3:unit = store %b7:i2:i32 %l4:i32*
  %b7:i4:i32 = load %l3:i32*
  %b7:i5:unit = store %b7:i4:i32 %l2:i32*
  %b7:i6:i32 = load %l4:i32*
  %b7:i7:unit = store %b7:i6:i32 %l3:i32*
  j b8()

block b8:
  %b8:i0:i32 = load %l1:i32*
  %b8:i1:i32 = add %b8:i0:i32 1:i32
  %b8:i2:unit = store %b8:i1:i32 %l1:i32*
  j b6()

block b9:
  %b9:i0:i32 = load %l3:i32*
  ret %b9:i0:i32

block b10:
  ret undef:i32
}

fun i32 @main () {
init:
  bid: b0
  allocations: 


block b0:
  %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
  %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
  %b0:i2:i32 = typecast %b0:i1:u1 to i32
  ret %b0:i2:i32

block b1:
  ret 0:i32
}


// CHECK: fun i32 @fibonacci (i32) {
// CHECK-NEXT: init:
// CHECK-NEXT: bid: b0
// CHECK-NEXT: allocations:
// CHECK-NEXT: %l0:i32:n
// CHECK-NEXT: %l1:i32:i
// CHECK-NEXT: %l2:i32:t1
// CHECK-NEXT: %l3:i32:t2
// CHECK-NEXT: %l4:i32:next_term

// CHECK-LABEL: block b0:
// CHECK-NEXT: %b0:p0:i32:n
// CHECK-NEXT: %b0:i0:unit = store %b0:p0:i32 %l0:i32*
// CHECK-NEXT: %b0:i1:unit = store 0:i32 %l1:i32*
// CHECK-NEXT: %b0:i2:unit = store 0:i32 %l2:i32*
// CHECK-NEXT: %b0:i3:unit = store 1:i32 %l3:i32*
// CHECK-NEXT: %b0:i4:unit = store 0:i32 %l4:i32*
// CHECK-NEXT: %b0:i5:i32 = load %l0:i32*
// CHECK-NEXT: %b0:i6:u1 = cmp lt %b0:i5:i32 2:i32
// CHECK-NEXT: br %b0:i6:u1, b1(), b2()

// CHECK-LABEL: block b1:
// CHECK-NEXT: %b1:i0:i32 = load %l0:i32*
// CHECK-NEXT: ret %b1:i0:i32

// CHECK-LABEL: block b2:
// CHECK-NEXT: j b3()

// CHECK-LABEL: block b3:
// CHECK-NEXT: j b5()

// CHECK-LABEL: block b4:
// CHECK-NEXT: j b3()

// CHECK-LABEL: block b5:
// CHECK-NEXT: %b5:i0:unit = store 1:i32 %l1:i32*
// CHECK-NEXT: j b6()

// CHECK-LABEL: block b6:
// CHECK-NEXT: %b6:i0:i32 = load %l1:i32*
// CHECK-NEXT: %b6:i1:i32 = load %l0:i32*
// CHECK-NEXT: %b6:i2:u1 = cmp lt %b6:i0:i32 %b6:i1:i32
// CHECK-NEXT: br %b6:i2:u1, b7(), b9()

// CHECK-LABEL: block b7:
// CHECK-NEXT: %b7:i0:i32 = load %l2:i32*
// CHECK-NEXT: %b7:i1:i32 = load %l3:i32*
// CHECK-NEXT: %b7:i2:i32 = add %b7:i0:i32 %b7:i1:i32
// CHECK-NEXT: %b7:i3:unit = store %b7:i2:i32 %l4:i32*
// CHECK-NEXT: %b7:i4:i32 = load %l3:i32*
// CHECK-NEXT: %b7:i5:unit = store %b7:i4:i32 %l2:i32*
// CHECK-NEXT: %b7:i6:i32 = load %l4:i32*
// CHECK-NEXT: %b7:i7:unit = store %b7:i6:i32 %l3:i32*
// CHECK-NEXT: j b8()

// CHECK-LABEL: block b8:
// CHECK-NEXT: %b8:i0:i32 = load %l1:i32*
// CHECK-NEXT: %b8:i1:i32 = add %b8:i0:i32 1:i32
// CHECK-NEXT: %b8:i2:unit = store %b8:i1:i32 %l1:i32*
// CHECK-NEXT: j b6()

// CHECK-LABEL: block b9:
// CHECK-NEXT: %b9:i0:i32 = load %l3:i32*
// CHECK-NEXT: ret %b9:i0:i32

// CHECK-LABEL: block b10:
// CHECK-NEXT: ret undef:i32
// CHECK-NEXT: }

// CHECK-LABEL: fun i32 @main () {
// CHECK-NEXT: init:
// CHECK-NEXT: bid: b0
// CHECK-NEXT: allocations:


// CHECK-LABEL: block b0:
// CHECK-NEXT: %b0:i0:i32 = call @fibonacci:[ret:i32 params:(i32)]*(9:i32)
// CHECK-NEXT: %b0:i1:u1 = cmp eq %b0:i0:i32 34:i32
// CHECK-NEXT: %b0:i2:i32 = typecast %b0:i1:u1 to i32
// CHECK-NEXT: ret %b0:i2:i32

// CHECK-LABEL: block b1:
// CHECK-NEXT: ret 0:i32
// CHECK-NEXT: }

